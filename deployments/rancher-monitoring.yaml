apiVersion: catalog.cattle.io/v1
kind: App
metadata:
  annotations:
    objectset.rio.cattle.io/applied: 
    objectset.rio.cattle.io/id: helm-app
    objectset.rio.cattle.io/owner-gvk: /v1, Kind=Secret
    objectset.rio.cattle.io/owner-name: sh.helm.release.v1.rancher-monitoring.v1
    objectset.rio.cattle.io/owner-namespace: cattle-monitoring-system
  creationTimestamp: "2020-11-26T22:17:39Z"
  generation: 2
  labels:
    objectset.rio.cattle.io/hash: afd0d9d7cfc6e6d7ab5c7044fb2bc771e55109c1
  managedFields:
  - apiVersion: catalog.cattle.io/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:objectset.rio.cattle.io/applied: {}
          f:objectset.rio.cattle.io/id: {}
          f:objectset.rio.cattle.io/owner-gvk: {}
          f:objectset.rio.cattle.io/owner-name: {}
          f:objectset.rio.cattle.io/owner-namespace: {}
        f:labels:
          .: {}
          f:objectset.rio.cattle.io/hash: {}
        f:ownerReferences:
          .: {}
          k:{"uid":"f3a072f2-3319-48e1-92e3-f9e0a200968a"}:
            .: {}
            f:apiVersion: {}
            f:blockOwnerDeletion: {}
            f:controller: {}
            f:kind: {}
            f:name: {}
            f:uid: {}
      f:spec:
        .: {}
        f:chart:
          .: {}
          f:metadata:
            .: {}
            f:annotations:
              .: {}
              f:artifacthub.io/links: {}
              f:artifacthub.io/operator: {}
              f:catalog.cattle.io/auto-install: {}
              f:catalog.cattle.io/certified: {}
              f:catalog.cattle.io/display-name: {}
              f:catalog.cattle.io/namespace: {}
              f:catalog.cattle.io/provides-gvr: {}
              f:catalog.cattle.io/release-name: {}
              f:catalog.cattle.io/ui-component: {}
              f:catalog.cattle.io/ui-source-repo: {}
              f:catalog.cattle.io/ui-source-repo-type: {}
            f:apiVersion: {}
            f:appVersion: {}
            f:description: {}
            f:home: {}
            f:icon: {}
            f:keywords: {}
            f:maintainers: {}
            f:name: {}
            f:sources: {}
            f:version: {}
          f:values:
            .: {}
            f:additionalPrometheusRules: {}
            f:alertmanager:
              .: {}
              f:alertmanagerSpec:
                .: {}
                f:additionalPeers: {}
                f:affinity: {}
                f:configMaps: {}
                f:containers: {}
                f:externalUrl: {}
                f:image:
                  .: {}
                  f:repository: {}
                  f:sha: {}
                  f:tag: {}
                f:listenLocal: {}
                f:logFormat: {}
                f:logLevel: {}
                f:nodeSelector: {}
                f:paused: {}
                f:podAntiAffinity: {}
                f:podAntiAffinityTopologyKey: {}
                f:podMetadata: {}
                f:portName: {}
                f:priorityClassName: {}
                f:replicas: {}
                f:resources:
                  .: {}
                  f:limits:
                    .: {}
                    f:cpu: {}
                    f:memory: {}
                  f:requests:
                    .: {}
                    f:cpu: {}
                    f:memory: {}
                f:retention: {}
                f:routePrefix: {}
                f:secrets: {}
                f:securityContext:
                  .: {}
                  f:fsGroup: {}
                  f:runAsGroup: {}
                  f:runAsNonRoot: {}
                  f:runAsUser: {}
                f:storage: {}
                f:tolerations: {}
                f:useExistingSecret: {}
              f:apiVersion: {}
              f:config:
                .: {}
                f:global:
                  .: {}
                  f:resolve_timeout: {}
                f:receivers: {}
                f:route:
                  .: {}
                  f:group_by: {}
                  f:group_interval: {}
                  f:group_wait: {}
                  f:receiver: {}
                  f:repeat_interval: {}
                  f:routes: {}
                f:templates: {}
              f:enabled: {}
              f:ingress:
                .: {}
                f:annotations: {}
                f:enabled: {}
                f:hosts: {}
                f:labels: {}
                f:paths: {}
                f:tls: {}
              f:ingressPerReplica:
                .: {}
                f:annotations: {}
                f:enabled: {}
                f:hostDomain: {}
                f:hostPrefix: {}
                f:labels: {}
                f:paths: {}
                f:tlsSecretName: {}
                f:tlsSecretPerReplica:
                  .: {}
                  f:enabled: {}
                  f:prefix: {}
              f:podDisruptionBudget:
                .: {}
                f:enabled: {}
                f:maxUnavailable: {}
                f:minAvailable: {}
              f:secret:
                .: {}
                f:annotations: {}
                f:cleanupOnUninstall: {}
                f:image:
                  .: {}
                  f:pullPolicy: {}
                  f:repository: {}
                  f:tag: {}
                f:securityContext:
                  .: {}
                  f:runAsNonRoot: {}
                  f:runAsUser: {}
              f:service:
                .: {}
                f:annotations: {}
                f:clusterIP: {}
                f:externalIPs: {}
                f:labels: {}
                f:loadBalancerIP: {}
                f:loadBalancerSourceRanges: {}
                f:nodePort: {}
                f:port: {}
                f:targetPort: {}
                f:type: {}
              f:serviceAccount:
                .: {}
                f:annotations: {}
                f:create: {}
                f:name: {}
              f:serviceMonitor:
                .: {}
                f:interval: {}
                f:metricRelabelings: {}
                f:relabelings: {}
                f:selfMonitor: {}
              f:servicePerReplica:
                .: {}
                f:annotations: {}
                f:enabled: {}
                f:loadBalancerSourceRanges: {}
                f:nodePort: {}
                f:port: {}
                f:targetPort: {}
                f:type: {}
              f:templateFiles:
                .: {}
                f:rancher_defaults.tmpl: {}
              f:tplConfig: {}
            f:commonLabels: {}
            f:coreDns:
              .: {}
              f:enabled: {}
              f:service:
                .: {}
                f:port: {}
                f:targetPort: {}
              f:serviceMonitor:
                .: {}
                f:interval: {}
                f:metricRelabelings: {}
                f:relabelings: {}
            f:defaultRules:
              .: {}
              f:annotations: {}
              f:appNamespacesTarget: {}
              f:create: {}
              f:labels: {}
              f:rules:
                .: {}
                f:alertmanager: {}
                f:etcd: {}
                f:general: {}
                f:k8s: {}
                f:kubeApiserver: {}
                f:kubeApiserverAvailability: {}
                f:kubeApiserverError: {}
                f:kubeApiserverSlos: {}
                f:kubePrometheusGeneral: {}
                f:kubePrometheusNodeAlerting: {}
                f:kubePrometheusNodeRecording: {}
                f:kubeScheduler: {}
                f:kubeStateMetrics: {}
                f:kubelet: {}
                f:kubernetesAbsent: {}
                f:kubernetesApps: {}
                f:kubernetesResources: {}
                f:kubernetesStorage: {}
                f:kubernetesSystem: {}
                f:network: {}
                f:node: {}
                f:prometheus: {}
                f:prometheusOperator: {}
                f:time: {}
              f:runbookUrl: {}
            f:fullnameOverride: {}
            f:global:
              .: {}
              f:cattle:
                .: {}
                f:systemDefaultRegistry: {}
              f:imagePullSecrets: {}
              f:kubectl:
                .: {}
                f:pullPolicy: {}
                f:repository: {}
                f:tag: {}
              f:rbac:
                .: {}
                f:create: {}
                f:pspAnnotations: {}
                f:pspEnabled: {}
                f:userRoles:
                  .: {}
                  f:aggregateToDefaultRoles: {}
                  f:create: {}
            f:grafana:
              .: {}
              f:additionalDataSources: {}
              f:admin:
                .: {}
                f:existingSecret: {}
                f:passwordKey: {}
                f:userKey: {}
              f:adminPassword: {}
              f:adminUser: {}
              f:affinity: {}
              f:dashboardProviders: {}
              f:dashboards: {}
              f:dashboardsConfigMaps: {}
              f:datasources: {}
              f:defaultDashboardsEnabled: {}
              f:deploymentStrategy:
                .: {}
                f:type: {}
              f:downloadDashboards:
                .: {}
                f:env: {}
                f:resources: {}
              f:downloadDashboardsImage:
                .: {}
                f:pullPolicy: {}
                f:repository: {}
                f:sha: {}
                f:tag: {}
              f:enabled: {}
              f:env: {}
              f:envFromSecret: {}
              f:envRenderSecret: {}
              f:envValueFrom: {}
              f:extraConfigmapMounts: {}
              f:extraContainerVolumes: {}
              f:extraContainers: {}
              f:extraEmptyDirMounts: {}
              f:extraExposePorts: {}
              f:extraInitContainers: {}
              f:extraSecretMounts: {}
              f:extraVolumeMounts: {}
              f:global:
                .: {}
                f:cattle:
                  .: {}
                  f:clusterId: {}
                  f:clusterName: {}
                  f:systemDefaultRegistry: {}
                f:imagePullSecrets: {}
                f:kubectl:
                  .: {}
                  f:pullPolicy: {}
                  f:repository: {}
                  f:tag: {}
                f:rbac:
                  .: {}
                  f:create: {}
                  f:pspAnnotations: {}
                  f:pspEnabled: {}
                  f:userRoles:
                    .: {}
                    f:aggregateToDefaultRoles: {}
                    f:create: {}
                f:systemDefaultRegistry: {}
              f:grafana.ini:
                .: {}
                f:analytics:
                  .: {}
                  f:check_for_updates: {}
                f:auth:
                  .: {}
                  f:disable_login_form: {}
                f:auth.anonymous:
                  .: {}
                  f:enabled: {}
                  f:org_role: {}
                f:auth.basic:
                  .: {}
                  f:enabled: {}
                f:dashboards:
                  .: {}
                  f:default_home_dashboard_path: {}
                f:grafana_net:
                  .: {}
                  f:url: {}
                f:log:
                  .: {}
                  f:mode: {}
                f:paths:
                  .: {}
                  f:data: {}
                  f:logs: {}
                  f:plugins: {}
                  f:provisioning: {}
                f:users:
                  .: {}
                  f:auto_assign_org_role: {}
              f:hostAliases: {}
              f:image:
                .: {}
                f:pullPolicy: {}
                f:repository: {}
                f:sha: {}
                f:tag: {}
              f:ingress:
                .: {}
                f:annotations: {}
                f:enabled: {}
                f:extraPaths: {}
                f:hosts: {}
                f:labels: {}
                f:path: {}
                f:tls: {}
              f:initChownData:
                .: {}
                f:enabled: {}
                f:image:
                  .: {}
                  f:pullPolicy: {}
                  f:repository: {}
                  f:sha: {}
                  f:tag: {}
                f:resources: {}
              f:ldap:
                .: {}
                f:config: {}
                f:enabled: {}
                f:existingSecret: {}
              f:livenessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:path: {}
                  f:port: {}
                f:initialDelaySeconds: {}
                f:timeoutSeconds: {}
              f:namespaceOverride: {}
              f:nodeSelector: {}
              f:notifiers: {}
              f:persistence:
                .: {}
                f:accessModes: {}
                f:enabled: {}
                f:finalizers: {}
                f:size: {}
                f:type: {}
              f:plugins: {}
              f:podDisruptionBudget: {}
              f:podPortName: {}
              f:proxy:
                .: {}
                f:image:
                  .: {}
                  f:repository: {}
                  f:tag: {}
              f:rbac:
                .: {}
                f:create: {}
                f:extraClusterRoleRules: {}
                f:extraRoleRules: {}
                f:namespaced: {}
                f:pspAnnotations: {}
                f:pspEnabled: {}
              f:readinessProbe:
                .: {}
                f:httpGet:
                  .: {}
                  f:path: {}
                  f:port: {}
              f:replicas: {}
              f:resources:
                .: {}
                f:limits:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:securityContext:
                .: {}
                f:fsGroup: {}
                f:runAsGroup: {}
                f:runAsNonRoot: {}
                f:runAsUser: {}
              f:service:
                .: {}
                f:annotations: {}
                f:labels: {}
                f:nodePort: {}
                f:port: {}
                f:portName: {}
                f:targetPort: {}
                f:type: {}
              f:serviceAccount:
                .: {}
                f:create: {}
              f:serviceMonitor:
                .: {}
                f:enabled: {}
                f:interval: {}
                f:labels: {}
                f:metricRelabelings: {}
                f:path: {}
                f:relabelings: {}
                f:scrapeTimeout: {}
                f:selfMonitor: {}
              f:sidecar:
                .: {}
                f:dashboards:
                  .: {}
                  f:SCProvider: {}
                  f:annotations: {}
                  f:defaultFolderName: {}
                  f:enabled: {}
                  f:folder: {}
                  f:label: {}
                  f:provider:
                    .: {}
                    f:allowUiUpdates: {}
                    f:disableDelete: {}
                    f:folder: {}
                    f:name: {}
                    f:orgid: {}
                    f:type: {}
                  f:searchNamespace: {}
                f:datasources:
                  .: {}
                  f:annotations: {}
                  f:createPrometheusReplicasDatasources: {}
                  f:defaultDatasourceEnabled: {}
                  f:enabled: {}
                  f:label: {}
                  f:searchNamespace: {}
                f:enableUniqueFilenames: {}
                f:image:
                  .: {}
                  f:repository: {}
                  f:sha: {}
                  f:tag: {}
                f:imagePullPolicy: {}
                f:notifiers:
                  .: {}
                  f:enabled: {}
                  f:label: {}
                f:resources: {}
              f:smtp:
                .: {}
                f:existingSecret: {}
                f:passwordKey: {}
                f:userKey: {}
              f:testFramework:
                .: {}
                f:enabled: {}
                f:image: {}
                f:imagePullPolicy: {}
                f:securityContext:
                  .: {}
                  f:runAsNonRoot: {}
                  f:runAsUser: {}
                f:tag: {}
              f:tolerations: {}
            f:k3sServer:
              .: {}
              f:clients:
                .: {}
                f:command: {}
                f:copyCertsImage:
                  .: {}
                  f:repository: {}
                  f:tag: {}
                f:enabled: {}
                f:https:
                  .: {}
                  f:caCertFile: {}
                  f:certDir: {}
                  f:certFile: {}
                  f:enabled: {}
                  f:insecureSkipVerify: {}
                  f:keyFile: {}
                  f:useServiceAccountCredentials: {}
                f:image:
                  .: {}
                  f:repository: {}
                  f:tag: {}
                f:nodeSelector: {}
                f:port: {}
                f:proxyUrl: {}
                f:resources: {}
                f:tolerations: {}
                f:useLocalhost: {}
              f:component: {}
              f:enabled: {}
              f:global:
                .: {}
                f:cattle:
                  .: {}
                  f:clusterId: {}
                  f:clusterName: {}
                  f:systemDefaultRegistry: {}
                f:imagePullSecrets: {}
                f:kubectl:
                  .: {}
                  f:pullPolicy: {}
                  f:repository: {}
                  f:tag: {}
                f:rbac:
                  .: {}
                  f:create: {}
                  f:pspAnnotations: {}
                  f:pspEnabled: {}
                  f:userRoles:
                    .: {}
                    f:aggregateToDefaultRoles: {}
                    f:create: {}
                f:systemDefaultRegistry: {}
              f:metricsPort: {}
              f:proxy:
                .: {}
                f:command: {}
                f:enabled: {}
                f:image:
                  .: {}
                  f:repository: {}
                  f:tag: {}
                f:nodeSelector: {}
                f:port: {}
                f:resources: {}
                f:tolerations: {}
              f:serviceMonitor:
                .: {}
                f:enabled: {}
            f:kube-state-metrics:
              .: {}
              f:affinity: {}
              f:autosharding:
                .: {}
                f:enabled: {}
              f:collectors:
                .: {}
                f:certificatesigningrequests: {}
                f:configmaps: {}
                f:cronjobs: {}
                f:daemonsets: {}
                f:deployments: {}
                f:endpoints: {}
                f:horizontalpodautoscalers: {}
                f:ingresses: {}
                f:jobs: {}
                f:limitranges: {}
                f:mutatingwebhookconfigurations: {}
                f:namespaces: {}
                f:networkpolicies: {}
                f:nodes: {}
                f:persistentvolumeclaims: {}
                f:persistentvolumes: {}
                f:poddisruptionbudgets: {}
                f:pods: {}
                f:replicasets: {}
                f:replicationcontrollers: {}
                f:resourcequotas: {}
                f:secrets: {}
                f:services: {}
                f:statefulsets: {}
                f:storageclasses: {}
                f:validatingwebhookconfigurations: {}
                f:verticalpodautoscalers: {}
                f:volumeattachments: {}
              f:customLabels: {}
              f:global:
                .: {}
                f:cattle:
                  .: {}
                  f:clusterId: {}
                  f:clusterName: {}
                  f:systemDefaultRegistry: {}
                f:imagePullSecrets: {}
                f:kubectl:
                  .: {}
                  f:pullPolicy: {}
                  f:repository: {}
                  f:tag: {}
                f:rbac:
                  .: {}
                  f:create: {}
                  f:pspAnnotations: {}
                  f:pspEnabled: {}
                  f:userRoles:
                    .: {}
                    f:aggregateToDefaultRoles: {}
                    f:create: {}
                f:systemDefaultRegistry: {}
              f:hostNetwork: {}
              f:image:
                .: {}
                f:pullPolicy: {}
                f:repository: {}
                f:tag: {}
              f:imagePullSecrets: {}
              f:kubeTargetVersionOverride: {}
              f:namespaceOverride: {}
              f:nodeSelector: {}
              f:podAnnotations: {}
              f:podDisruptionBudget: {}
              f:podSecurityPolicy:
                .: {}
                f:additionalVolumes: {}
                f:annotations: {}
                f:enabled: {}
              f:prometheus:
                .: {}
                f:monitor:
                  .: {}
                  f:additionalLabels: {}
                  f:enabled: {}
                  f:honorLabels: {}
                  f:namespace: {}
              f:prometheusScrape: {}
              f:rbac:
                .: {}
                f:create: {}
              f:replicas: {}
              f:resources:
                .: {}
                f:limits:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:securityContext:
                .: {}
                f:enabled: {}
                f:fsGroup: {}
                f:runAsGroup: {}
                f:runAsNonRoot: {}
                f:runAsUser: {}
              f:service:
                .: {}
                f:annotations: {}
                f:loadBalancerIP: {}
                f:nodePort: {}
                f:port: {}
                f:type: {}
              f:serviceAccount:
                .: {}
                f:annotations: {}
                f:create: {}
                f:imagePullSecrets: {}
              f:tolerations: {}
            f:kubeAdmControllerManager:
              .: {}
              f:clients:
                .: {}
                f:command: {}
                f:copyCertsImage:
                  .: {}
                  f:repository: {}
                  f:tag: {}
                f:enabled: {}
                f:https:
                  .: {}
                  f:caCertFile: {}
                  f:certDir: {}
                  f:certFile: {}
                  f:enabled: {}
                  f:insecureSkipVerify: {}
                  f:keyFile: {}
                  f:useServiceAccountCredentials: {}
                f:image:
                  .: {}
                  f:repository: {}
                  f:tag: {}
                f:nodeSelector:
                  .: {}
                  f:node-role.kubernetes.io/master: {}
                f:port: {}
                f:proxyUrl: {}
                f:resources: {}
                f:tolerations: {}
                f:useLocalhost: {}
              f:component: {}
              f:enabled: {}
              f:global:
                .: {}
                f:cattle:
                  .: {}
                  f:clusterId: {}
                  f:clusterName: {}
                  f:systemDefaultRegistry: {}
                f:imagePullSecrets: {}
                f:kubectl:
                  .: {}
                  f:pullPolicy: {}
                  f:repository: {}
                  f:tag: {}
                f:rbac:
                  .: {}
                  f:create: {}
                  f:pspAnnotations: {}
                  f:pspEnabled: {}
                  f:userRoles:
                    .: {}
                    f:aggregateToDefaultRoles: {}
                    f:create: {}
                f:systemDefaultRegistry: {}
              f:metricsPort: {}
              f:proxy:
                .: {}
                f:command: {}
                f:enabled: {}
                f:image:
                  .: {}
                  f:repository: {}
                  f:tag: {}
                f:nodeSelector: {}
                f:port: {}
                f:resources: {}
                f:tolerations: {}
              f:serviceMonitor:
                .: {}
                f:enabled: {}
            f:kubeAdmEtcd:
              .: {}
              f:clients:
                .: {}
                f:command: {}
                f:copyCertsImage:
                  .: {}
                  f:repository: {}
                  f:tag: {}
                f:enabled: {}
                f:https:
                  .: {}
                  f:caCertFile: {}
                  f:certDir: {}
                  f:certFile: {}
                  f:enabled: {}
                  f:insecureSkipVerify: {}
                  f:keyFile: {}
                  f:useServiceAccountCredentials: {}
                f:image:
                  .: {}
                  f:repository: {}
                  f:tag: {}
                f:nodeSelector:
                  .: {}
                  f:node-role.kubernetes.io/master: {}
                f:port: {}
                f:proxyUrl: {}
                f:resources: {}
                f:tolerations: {}
                f:useLocalhost: {}
              f:component: {}
              f:enabled: {}
              f:global:
                .: {}
                f:cattle:
                  .: {}
                  f:clusterId: {}
                  f:clusterName: {}
                  f:systemDefaultRegistry: {}
                f:imagePullSecrets: {}
                f:kubectl:
                  .: {}
                  f:pullPolicy: {}
                  f:repository: {}
                  f:tag: {}
                f:rbac:
                  .: {}
                  f:create: {}
                  f:pspAnnotations: {}
                  f:pspEnabled: {}
                  f:userRoles:
                    .: {}
                    f:aggregateToDefaultRoles: {}
                    f:create: {}
                f:systemDefaultRegistry: {}
              f:metricsPort: {}
              f:proxy:
                .: {}
                f:command: {}
                f:enabled: {}
                f:image:
                  .: {}
                  f:repository: {}
                  f:tag: {}
                f:nodeSelector: {}
                f:port: {}
                f:resources: {}
                f:tolerations: {}
              f:serviceMonitor:
                .: {}
                f:enabled: {}
            f:kubeAdmProxy:
              .: {}
              f:clients:
                .: {}
                f:command: {}
                f:copyCertsImage:
                  .: {}
                  f:repository: {}
                  f:tag: {}
                f:enabled: {}
                f:https:
                  .: {}
                  f:caCertFile: {}
                  f:certDir: {}
                  f:certFile: {}
                  f:enabled: {}
                  f:insecureSkipVerify: {}
                  f:keyFile: {}
                  f:useServiceAccountCredentials: {}
                f:image:
                  .: {}
                  f:repository: {}
                  f:tag: {}
                f:nodeSelector: {}
                f:port: {}
                f:proxyUrl: {}
                f:resources: {}
                f:tolerations: {}
                f:useLocalhost: {}
              f:component: {}
              f:enabled: {}
              f:global:
                .: {}
                f:cattle:
                  .: {}
                  f:clusterId: {}
                  f:clusterName: {}
                  f:systemDefaultRegistry: {}
                f:imagePullSecrets: {}
                f:kubectl:
                  .: {}
                  f:pullPolicy: {}
                  f:repository: {}
                  f:tag: {}
                f:rbac:
                  .: {}
                  f:create: {}
                  f:pspAnnotations: {}
                  f:pspEnabled: {}
                  f:userRoles:
                    .: {}
                    f:aggregateToDefaultRoles: {}
                    f:create: {}
                f:systemDefaultRegistry: {}
              f:metricsPort: {}
              f:proxy:
                .: {}
                f:command: {}
                f:enabled: {}
                f:image:
                  .: {}
                  f:repository: {}
                  f:tag: {}
                f:nodeSelector: {}
                f:port: {}
                f:resources: {}
                f:tolerations: {}
              f:serviceMonitor:
                .: {}
                f:enabled: {}
            f:kubeAdmScheduler:
              .: {}
              f:clients:
                .: {}
                f:command: {}
                f:copyCertsImage:
                  .: {}
                  f:repository: {}
                  f:tag: {}
                f:enabled: {}
                f:https:
                  .: {}
                  f:caCertFile: {}
                  f:certDir: {}
                  f:certFile: {}
                  f:enabled: {}
                  f:insecureSkipVerify: {}
                  f:keyFile: {}
                  f:useServiceAccountCredentials: {}
                f:image:
                  .: {}
                  f:repository: {}
                  f:tag: {}
                f:nodeSelector:
                  .: {}
                  f:node-role.kubernetes.io/master: {}
                f:port: {}
                f:proxyUrl: {}
                f:resources: {}
                f:tolerations: {}
                f:useLocalhost: {}
              f:component: {}
              f:enabled: {}
              f:global:
                .: {}
                f:cattle:
                  .: {}
                  f:clusterId: {}
                  f:clusterName: {}
                  f:systemDefaultRegistry: {}
                f:imagePullSecrets: {}
                f:kubectl:
                  .: {}
                  f:pullPolicy: {}
                  f:repository: {}
                  f:tag: {}
                f:rbac:
                  .: {}
                  f:create: {}
                  f:pspAnnotations: {}
                  f:pspEnabled: {}
                  f:userRoles:
                    .: {}
                    f:aggregateToDefaultRoles: {}
                    f:create: {}
                f:systemDefaultRegistry: {}
              f:metricsPort: {}
              f:proxy:
                .: {}
                f:command: {}
                f:enabled: {}
                f:image:
                  .: {}
                  f:repository: {}
                  f:tag: {}
                f:nodeSelector: {}
                f:port: {}
                f:resources: {}
                f:tolerations: {}
              f:serviceMonitor:
                .: {}
                f:enabled: {}
            f:kubeApiServer:
              .: {}
              f:enabled: {}
              f:relabelings: {}
              f:serviceMonitor:
                .: {}
                f:interval: {}
                f:jobLabel: {}
                f:metricRelabelings: {}
                f:selector:
                  .: {}
                  f:matchLabels:
                    .: {}
                    f:component: {}
                    f:provider: {}
              f:tlsConfig:
                .: {}
                f:insecureSkipVerify: {}
                f:serverName: {}
            f:kubeControllerManager:
              .: {}
              f:enabled: {}
              f:endpoints: {}
              f:service:
                .: {}
                f:port: {}
                f:targetPort: {}
              f:serviceMonitor:
                .: {}
                f:https: {}
                f:insecureSkipVerify: {}
                f:interval: {}
                f:metricRelabelings: {}
                f:relabelings: {}
                f:serverName: {}
            f:kubeDns:
              .: {}
              f:enabled: {}
              f:service:
                .: {}
                f:dnsmasq:
                  .: {}
                  f:port: {}
                  f:targetPort: {}
                f:skydns:
                  .: {}
                  f:port: {}
                  f:targetPort: {}
              f:serviceMonitor:
                .: {}
                f:dnsmasqMetricRelabelings: {}
                f:dnsmasqRelabelings: {}
                f:interval: {}
                f:metricRelabelings: {}
                f:relabelings: {}
            f:kubeEtcd:
              .: {}
              f:enabled: {}
              f:endpoints: {}
              f:service:
                .: {}
                f:port: {}
                f:targetPort: {}
              f:serviceMonitor:
                .: {}
                f:caFile: {}
                f:certFile: {}
                f:insecureSkipVerify: {}
                f:interval: {}
                f:keyFile: {}
                f:metricRelabelings: {}
                f:relabelings: {}
                f:scheme: {}
                f:serverName: {}
            f:kubeProxy:
              .: {}
              f:enabled: {}
              f:endpoints: {}
              f:service:
                .: {}
                f:port: {}
                f:targetPort: {}
              f:serviceMonitor:
                .: {}
                f:https: {}
                f:interval: {}
                f:metricRelabelings: {}
                f:relabelings: {}
            f:kubeScheduler:
              .: {}
              f:enabled: {}
              f:endpoints: {}
              f:service:
                .: {}
                f:port: {}
                f:targetPort: {}
              f:serviceMonitor:
                .: {}
                f:https: {}
                f:insecureSkipVerify: {}
                f:interval: {}
                f:metricRelabelings: {}
                f:relabelings: {}
                f:serverName: {}
            f:kubeStateMetrics:
              .: {}
              f:enabled: {}
              f:serviceMonitor:
                .: {}
                f:interval: {}
                f:metricRelabelings: {}
                f:relabelings: {}
            f:kubeTargetVersionOverride: {}
            f:kubelet:
              .: {}
              f:enabled: {}
              f:namespace: {}
              f:serviceMonitor:
                .: {}
                f:cAdvisor: {}
                f:cAdvisorMetricRelabelings: {}
                f:cAdvisorRelabelings: {}
                f:https: {}
                f:interval: {}
                f:metricRelabelings: {}
                f:probes: {}
                f:probesMetricRelabelings: {}
                f:probesRelabelings: {}
                f:relabelings: {}
                f:resource: {}
                f:resourcePath: {}
                f:resourceRelabelings: {}
            f:nameOverride: {}
            f:namespaceOverride: {}
            f:nodeExporter:
              .: {}
              f:enabled: {}
              f:jobLabel: {}
              f:serviceMonitor:
                .: {}
                f:interval: {}
                f:metricRelabelings: {}
                f:relabelings: {}
                f:scrapeTimeout: {}
            f:prometheus:
              .: {}
              f:additionalPodMonitors: {}
              f:additionalServiceMonitors: {}
              f:annotations: {}
              f:enabled: {}
              f:ingress:
                .: {}
                f:annotations: {}
                f:enabled: {}
                f:hosts: {}
                f:labels: {}
                f:paths: {}
                f:tls: {}
              f:ingressPerReplica:
                .: {}
                f:annotations: {}
                f:enabled: {}
                f:hostDomain: {}
                f:hostPrefix: {}
                f:labels: {}
                f:paths: {}
                f:tlsSecretName: {}
                f:tlsSecretPerReplica:
                  .: {}
                  f:enabled: {}
                  f:prefix: {}
              f:podDisruptionBudget:
                .: {}
                f:enabled: {}
                f:maxUnavailable: {}
                f:minAvailable: {}
              f:podSecurityPolicy:
                .: {}
                f:allowedCapabilities: {}
              f:prometheusSpec:
                .: {}
                f:additionalAlertManagerConfigs: {}
                f:additionalAlertRelabelConfigs: {}
                f:additionalPrometheusSecretsAnnotations: {}
                f:additionalScrapeConfigs: {}
                f:additionalScrapeConfigsSecret: {}
                f:affinity: {}
                f:alertingEndpoints: {}
                f:apiserverConfig: {}
                f:configMaps: {}
                f:containers: {}
                f:disableCompaction: {}
                f:enableAdminAPI: {}
                f:evaluationInterval: {}
                f:externalLabels: {}
                f:externalUrl: {}
                f:ignoreNamespaceSelectors: {}
                f:image:
                  .: {}
                  f:repository: {}
                  f:sha: {}
                  f:tag: {}
                f:initContainers: {}
                f:listenLocal: {}
                f:logFormat: {}
                f:logLevel: {}
                f:nodeSelector: {}
                f:paused: {}
                f:podAntiAffinity: {}
                f:podAntiAffinityTopologyKey: {}
                f:podMetadata: {}
                f:podMonitorNamespaceSelector: {}
                f:podMonitorSelector: {}
                f:podMonitorSelectorNilUsesHelmValues: {}
                f:portName: {}
                f:priorityClassName: {}
                f:prometheusExternalLabelName: {}
                f:prometheusExternalLabelNameClear: {}
                f:proxy:
                  .: {}
                  f:image:
                    .: {}
                    f:repository: {}
                    f:tag: {}
                f:query: {}
                f:remoteRead: {}
                f:remoteWrite: {}
                f:remoteWriteDashboards: {}
                f:replicaExternalLabelName: {}
                f:replicaExternalLabelNameClear: {}
                f:replicas: {}
                f:resources:
                  .: {}
                  f:limits:
                    .: {}
                    f:cpu: {}
                    f:memory: {}
                  f:requests:
                    .: {}
                    f:cpu: {}
                    f:memory: {}
                f:retention: {}
                f:retentionSize: {}
                f:routePrefix: {}
                f:ruleNamespaceSelector: {}
                f:ruleSelector: {}
                f:ruleSelectorNilUsesHelmValues: {}
                f:scrapeInterval: {}
                f:secrets: {}
                f:securityContext:
                  .: {}
                  f:fsGroup: {}
                  f:runAsGroup: {}
                  f:runAsNonRoot: {}
                  f:runAsUser: {}
                f:serviceMonitorNamespaceSelector: {}
                f:serviceMonitorSelector: {}
                f:serviceMonitorSelectorNilUsesHelmValues: {}
                f:storageSpec: {}
                f:thanos: {}
                f:tolerations: {}
                f:volumeMounts: {}
                f:volumes: {}
                f:walCompression: {}
              f:service:
                .: {}
                f:annotations: {}
                f:clusterIP: {}
                f:externalIPs: {}
                f:labels: {}
                f:loadBalancerIP: {}
                f:loadBalancerSourceRanges: {}
                f:nodePort: {}
                f:port: {}
                f:sessionAffinity: {}
                f:targetPort: {}
                f:type: {}
              f:serviceAccount:
                .: {}
                f:create: {}
                f:name: {}
              f:serviceMonitor:
                .: {}
                f:bearerTokenFile: {}
                f:interval: {}
                f:metricRelabelings: {}
                f:relabelings: {}
                f:scheme: {}
                f:selfMonitor: {}
                f:tlsConfig: {}
              f:servicePerReplica:
                .: {}
                f:annotations: {}
                f:enabled: {}
                f:loadBalancerSourceRanges: {}
                f:nodePort: {}
                f:port: {}
                f:targetPort: {}
                f:type: {}
              f:thanosIngress:
                .: {}
                f:annotations: {}
                f:enabled: {}
                f:hosts: {}
                f:labels: {}
                f:paths: {}
                f:servicePort: {}
                f:tls: {}
            f:prometheus-adapter:
              .: {}
              f:affinity: {}
              f:enabled: {}
              f:extraVolumeMounts: {}
              f:extraVolumes: {}
              f:global:
                .: {}
                f:cattle:
                  .: {}
                  f:clusterId: {}
                  f:clusterName: {}
                  f:systemDefaultRegistry: {}
                f:imagePullSecrets: {}
                f:kubectl:
                  .: {}
                  f:pullPolicy: {}
                  f:repository: {}
                  f:tag: {}
                f:rbac:
                  .: {}
                  f:create: {}
                  f:pspAnnotations: {}
                  f:pspEnabled: {}
                  f:userRoles:
                    .: {}
                    f:aggregateToDefaultRoles: {}
                    f:create: {}
                f:systemDefaultRegistry: {}
              f:hostNetwork:
                .: {}
                f:enabled: {}
              f:image:
                .: {}
                f:pullPolicy: {}
                f:pullSecrets: {}
                f:repository: {}
                f:tag: {}
              f:listenPort: {}
              f:logLevel: {}
              f:metricsRelistInterval: {}
              f:nodeSelector: {}
              f:podAnnotations: {}
              f:podLabels: {}
              f:priorityClassName: {}
              f:prometheus:
                .: {}
                f:path: {}
                f:port: {}
                f:url: {}
              f:rbac:
                .: {}
                f:create: {}
              f:replicas: {}
              f:resources: {}
              f:rules:
                .: {}
                f:custom: {}
                f:default: {}
                f:external: {}
                f:resource: {}
              f:securityContext:
                .: {}
                f:runAsNonRoot: {}
                f:runAsUser: {}
              f:service:
                .: {}
                f:annotations: {}
                f:port: {}
                f:type: {}
              f:serviceAccount:
                .: {}
                f:create: {}
              f:tls:
                .: {}
                f:ca: {}
                f:certificate: {}
                f:enable: {}
                f:key: {}
              f:tolerations: {}
            f:prometheus-node-exporter:
              .: {}
              f:affinity: {}
              f:configmaps: {}
              f:endpoints: {}
              f:extraArgs: {}
              f:extraHostVolumeMounts: {}
              f:global:
                .: {}
                f:cattle:
                  .: {}
                  f:clusterId: {}
                  f:clusterName: {}
                  f:systemDefaultRegistry: {}
                f:imagePullSecrets: {}
                f:kubectl:
                  .: {}
                  f:pullPolicy: {}
                  f:repository: {}
                  f:tag: {}
                f:rbac:
                  .: {}
                  f:create: {}
                  f:pspAnnotations: {}
                  f:pspEnabled: {}
                  f:userRoles:
                    .: {}
                    f:aggregateToDefaultRoles: {}
                    f:create: {}
                f:systemDefaultRegistry: {}
              f:hostNetwork: {}
              f:image:
                .: {}
                f:pullPolicy: {}
                f:repository: {}
                f:tag: {}
              f:namespaceOverride: {}
              f:nodeSelector: {}
              f:podAnnotations: {}
              f:podLabels:
                .: {}
                f:jobLabel: {}
              f:prometheus:
                .: {}
                f:monitor:
                  .: {}
                  f:additionalLabels: {}
                  f:enabled: {}
                  f:namespace: {}
                  f:relabelings: {}
                  f:scrapeTimeout: {}
              f:rbac:
                .: {}
                f:create: {}
                f:pspEnabled: {}
              f:resources:
                .: {}
                f:limits:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:securityContext:
                .: {}
                f:fsGroup: {}
                f:runAsGroup: {}
                f:runAsNonRoot: {}
                f:runAsUser: {}
              f:service:
                .: {}
                f:annotations:
                  .: {}
                  f:prometheus.io/scrape: {}
                f:listenOnAllInterfaces: {}
                f:nodePort: {}
                f:port: {}
                f:targetPort: {}
                f:type: {}
              f:serviceAccount:
                .: {}
                f:create: {}
                f:imagePullSecrets: {}
              f:sidecarVolumeMount: {}
              f:sidecars: {}
              f:tolerations: {}
              f:updateStrategy:
                .: {}
                f:rollingUpdate:
                  .: {}
                  f:maxUnavailable: {}
                f:type: {}
            f:prometheusOperator:
              .: {}
              f:admissionWebhooks:
                .: {}
                f:enabled: {}
                f:failurePolicy: {}
                f:patch:
                  .: {}
                  f:affinity: {}
                  f:enabled: {}
                  f:image:
                    .: {}
                    f:pullPolicy: {}
                    f:repository: {}
                    f:sha: {}
                    f:tag: {}
                  f:nodeSelector: {}
                  f:podAnnotations: {}
                  f:priorityClassName: {}
                  f:resources: {}
                  f:tolerations: {}
              f:affinity: {}
              f:cleanupCustomResource: {}
              f:configReloaderCpu: {}
              f:configReloaderMemory: {}
              f:configmapReloadImage:
                .: {}
                f:repository: {}
                f:sha: {}
                f:tag: {}
              f:createCustomResource: {}
              f:denyNamespaces: {}
              f:enabled: {}
              f:hostNetwork: {}
              f:image:
                .: {}
                f:pullPolicy: {}
                f:repository: {}
                f:sha: {}
                f:tag: {}
              f:kubeletService:
                .: {}
                f:enabled: {}
                f:namespace: {}
              f:manageCrds: {}
              f:namespaces: {}
              f:nodeSelector: {}
              f:podAnnotations: {}
              f:podLabels: {}
              f:prometheusConfigReloaderImage:
                .: {}
                f:repository: {}
                f:sha: {}
                f:tag: {}
              f:resources:
                .: {}
                f:limits:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:secretFieldSelector: {}
              f:securityContext:
                .: {}
                f:fsGroup: {}
                f:runAsGroup: {}
                f:runAsNonRoot: {}
                f:runAsUser: {}
              f:service:
                .: {}
                f:additionalPorts: {}
                f:annotations: {}
                f:clusterIP: {}
                f:externalIPs: {}
                f:labels: {}
                f:loadBalancerIP: {}
                f:loadBalancerSourceRanges: {}
                f:nodePort: {}
                f:nodePortTls: {}
                f:type: {}
              f:serviceAccount:
                .: {}
                f:create: {}
                f:name: {}
              f:serviceMonitor:
                .: {}
                f:interval: {}
                f:metricRelabelings: {}
                f:relabelings: {}
                f:scrapeTimeout: {}
                f:selfMonitor: {}
              f:tlsProxy:
                .: {}
                f:enabled: {}
                f:image:
                  .: {}
                  f:pullPolicy: {}
                  f:repository: {}
                  f:sha: {}
                  f:tag: {}
                f:resources: {}
              f:tolerations: {}
            f:rke2ControllerManager:
              .: {}
              f:clients:
                .: {}
                f:command: {}
                f:copyCertsImage:
                  .: {}
                  f:repository: {}
                  f:tag: {}
                f:enabled: {}
                f:https:
                  .: {}
                  f:caCertFile: {}
                  f:certDir: {}
                  f:certFile: {}
                  f:enabled: {}
                  f:insecureSkipVerify: {}
                  f:keyFile: {}
                  f:useServiceAccountCredentials: {}
                f:image:
                  .: {}
                  f:repository: {}
                  f:tag: {}
                f:nodeSelector:
                  .: {}
                  f:node-role.kubernetes.io/master: {}
                f:port: {}
                f:proxyUrl: {}
                f:resources: {}
                f:tolerations: {}
                f:useLocalhost: {}
              f:component: {}
              f:enabled: {}
              f:global:
                .: {}
                f:cattle:
                  .: {}
                  f:clusterId: {}
                  f:clusterName: {}
                  f:systemDefaultRegistry: {}
                f:imagePullSecrets: {}
                f:kubectl:
                  .: {}
                  f:pullPolicy: {}
                  f:repository: {}
                  f:tag: {}
                f:rbac:
                  .: {}
                  f:create: {}
                  f:pspAnnotations: {}
                  f:pspEnabled: {}
                  f:userRoles:
                    .: {}
                    f:aggregateToDefaultRoles: {}
                    f:create: {}
                f:systemDefaultRegistry: {}
              f:metricsPort: {}
              f:proxy:
                .: {}
                f:command: {}
                f:enabled: {}
                f:image:
                  .: {}
                  f:repository: {}
                  f:tag: {}
                f:nodeSelector: {}
                f:port: {}
                f:resources: {}
                f:tolerations: {}
              f:serviceMonitor:
                .: {}
                f:enabled: {}
            f:rke2Etcd:
              .: {}
              f:clients:
                .: {}
                f:command: {}
                f:copyCertsImage:
                  .: {}
                  f:repository: {}
                  f:tag: {}
                f:enabled: {}
                f:https:
                  .: {}
                  f:caCertFile: {}
                  f:certDir: {}
                  f:certFile: {}
                  f:enabled: {}
                  f:insecureSkipVerify: {}
                  f:keyFile: {}
                  f:useServiceAccountCredentials: {}
                f:image:
                  .: {}
                  f:repository: {}
                  f:tag: {}
                f:nodeSelector:
                  .: {}
                  f:node-role.kubernetes.io/etcd: {}
                f:port: {}
                f:proxyUrl: {}
                f:resources: {}
                f:tolerations: {}
                f:useLocalhost: {}
              f:component: {}
              f:enabled: {}
              f:global:
                .: {}
                f:cattle:
                  .: {}
                  f:clusterId: {}
                  f:clusterName: {}
                  f:systemDefaultRegistry: {}
                f:imagePullSecrets: {}
                f:kubectl:
                  .: {}
                  f:pullPolicy: {}
                  f:repository: {}
                  f:tag: {}
                f:rbac:
                  .: {}
                  f:create: {}
                  f:pspAnnotations: {}
                  f:pspEnabled: {}
                  f:userRoles:
                    .: {}
                    f:aggregateToDefaultRoles: {}
                    f:create: {}
                f:systemDefaultRegistry: {}
              f:metricsPort: {}
              f:proxy:
                .: {}
                f:command: {}
                f:enabled: {}
                f:image:
                  .: {}
                  f:repository: {}
                  f:tag: {}
                f:nodeSelector: {}
                f:port: {}
                f:resources: {}
                f:tolerations: {}
              f:serviceMonitor:
                .: {}
                f:enabled: {}
            f:rke2Proxy:
              .: {}
              f:clients:
                .: {}
                f:command: {}
                f:copyCertsImage:
                  .: {}
                  f:repository: {}
                  f:tag: {}
                f:enabled: {}
                f:https:
                  .: {}
                  f:caCertFile: {}
                  f:certDir: {}
                  f:certFile: {}
                  f:enabled: {}
                  f:insecureSkipVerify: {}
                  f:keyFile: {}
                  f:useServiceAccountCredentials: {}
                f:image:
                  .: {}
                  f:repository: {}
                  f:tag: {}
                f:nodeSelector: {}
                f:port: {}
                f:proxyUrl: {}
                f:resources: {}
                f:tolerations: {}
                f:useLocalhost: {}
              f:component: {}
              f:enabled: {}
              f:global:
                .: {}
                f:cattle:
                  .: {}
                  f:clusterId: {}
                  f:clusterName: {}
                  f:systemDefaultRegistry: {}
                f:imagePullSecrets: {}
                f:kubectl:
                  .: {}
                  f:pullPolicy: {}
                  f:repository: {}
                  f:tag: {}
                f:rbac:
                  .: {}
                  f:create: {}
                  f:pspAnnotations: {}
                  f:pspEnabled: {}
                  f:userRoles:
                    .: {}
                    f:aggregateToDefaultRoles: {}
                    f:create: {}
                f:systemDefaultRegistry: {}
              f:metricsPort: {}
              f:proxy:
                .: {}
                f:command: {}
                f:enabled: {}
                f:image:
                  .: {}
                  f:repository: {}
                  f:tag: {}
                f:nodeSelector: {}
                f:port: {}
                f:resources: {}
                f:tolerations: {}
              f:serviceMonitor:
                .: {}
                f:enabled: {}
              f:tolerations: {}
            f:rke2Scheduler:
              .: {}
              f:clients:
                .: {}
                f:command: {}
                f:copyCertsImage:
                  .: {}
                  f:repository: {}
                  f:tag: {}
                f:enabled: {}
                f:https:
                  .: {}
                  f:caCertFile: {}
                  f:certDir: {}
                  f:certFile: {}
                  f:enabled: {}
                  f:insecureSkipVerify: {}
                  f:keyFile: {}
                  f:useServiceAccountCredentials: {}
                f:image:
                  .: {}
                  f:repository: {}
                  f:tag: {}
                f:nodeSelector:
                  .: {}
                  f:node-role.kubernetes.io/master: {}
                f:port: {}
                f:proxyUrl: {}
                f:resources: {}
                f:tolerations: {}
                f:useLocalhost: {}
              f:component: {}
              f:enabled: {}
              f:global:
                .: {}
                f:cattle:
                  .: {}
                  f:clusterId: {}
                  f:clusterName: {}
                  f:systemDefaultRegistry: {}
                f:imagePullSecrets: {}
                f:kubectl:
                  .: {}
                  f:pullPolicy: {}
                  f:repository: {}
                  f:tag: {}
                f:rbac:
                  .: {}
                  f:create: {}
                  f:pspAnnotations: {}
                  f:pspEnabled: {}
                  f:userRoles:
                    .: {}
                    f:aggregateToDefaultRoles: {}
                    f:create: {}
                f:systemDefaultRegistry: {}
              f:metricsPort: {}
              f:proxy:
                .: {}
                f:command: {}
                f:enabled: {}
                f:image:
                  .: {}
                  f:repository: {}
                  f:tag: {}
                f:nodeSelector: {}
                f:port: {}
                f:resources: {}
                f:tolerations: {}
              f:serviceMonitor:
                .: {}
                f:enabled: {}
            f:rkeControllerManager:
              .: {}
              f:clients:
                .: {}
                f:command: {}
                f:copyCertsImage:
                  .: {}
                  f:repository: {}
                  f:tag: {}
                f:enabled: {}
                f:https:
                  .: {}
                  f:caCertFile: {}
                  f:certDir: {}
                  f:certFile: {}
                  f:enabled: {}
                  f:insecureSkipVerify: {}
                  f:keyFile: {}
                  f:useServiceAccountCredentials: {}
                f:image:
                  .: {}
                  f:repository: {}
                  f:tag: {}
                f:nodeSelector:
                  .: {}
                  f:node-role.kubernetes.io/controlplane: {}
                f:port: {}
                f:proxyUrl: {}
                f:resources: {}
                f:tolerations: {}
                f:useLocalhost: {}
              f:component: {}
              f:enabled: {}
              f:global:
                .: {}
                f:cattle:
                  .: {}
                  f:clusterId: {}
                  f:clusterName: {}
                  f:systemDefaultRegistry: {}
                f:imagePullSecrets: {}
                f:kubectl:
                  .: {}
                  f:pullPolicy: {}
                  f:repository: {}
                  f:tag: {}
                f:rbac:
                  .: {}
                  f:create: {}
                  f:pspAnnotations: {}
                  f:pspEnabled: {}
                  f:userRoles:
                    .: {}
                    f:aggregateToDefaultRoles: {}
                    f:create: {}
                f:systemDefaultRegistry: {}
              f:metricsPort: {}
              f:proxy:
                .: {}
                f:command: {}
                f:enabled: {}
                f:image:
                  .: {}
                  f:repository: {}
                  f:tag: {}
                f:nodeSelector: {}
                f:port: {}
                f:resources: {}
                f:tolerations: {}
              f:serviceMonitor:
                .: {}
                f:enabled: {}
            f:rkeEtcd:
              .: {}
              f:clients:
                .: {}
                f:command: {}
                f:copyCertsImage:
                  .: {}
                  f:repository: {}
                  f:tag: {}
                f:enabled: {}
                f:https:
                  .: {}
                  f:caCertFile: {}
                  f:certDir: {}
                  f:certFile: {}
                  f:enabled: {}
                  f:insecureSkipVerify: {}
                  f:keyFile: {}
                  f:useServiceAccountCredentials: {}
                f:image:
                  .: {}
                  f:repository: {}
                  f:tag: {}
                f:nodeSelector:
                  .: {}
                  f:node-role.kubernetes.io/etcd: {}
                f:port: {}
                f:proxyUrl: {}
                f:resources: {}
                f:tolerations: {}
                f:useLocalhost: {}
              f:component: {}
              f:enabled: {}
              f:global:
                .: {}
                f:cattle:
                  .: {}
                  f:clusterId: {}
                  f:clusterName: {}
                  f:systemDefaultRegistry: {}
                f:imagePullSecrets: {}
                f:kubectl:
                  .: {}
                  f:pullPolicy: {}
                  f:repository: {}
                  f:tag: {}
                f:rbac:
                  .: {}
                  f:create: {}
                  f:pspAnnotations: {}
                  f:pspEnabled: {}
                  f:userRoles:
                    .: {}
                    f:aggregateToDefaultRoles: {}
                    f:create: {}
                f:systemDefaultRegistry: {}
              f:metricsPort: {}
              f:proxy:
                .: {}
                f:command: {}
                f:enabled: {}
                f:image:
                  .: {}
                  f:repository: {}
                  f:tag: {}
                f:nodeSelector: {}
                f:port: {}
                f:resources: {}
                f:tolerations: {}
              f:serviceMonitor:
                .: {}
                f:enabled: {}
            f:rkeProxy:
              .: {}
              f:clients:
                .: {}
                f:command: {}
                f:copyCertsImage:
                  .: {}
                  f:repository: {}
                  f:tag: {}
                f:enabled: {}
                f:https:
                  .: {}
                  f:caCertFile: {}
                  f:certDir: {}
                  f:certFile: {}
                  f:enabled: {}
                  f:insecureSkipVerify: {}
                  f:keyFile: {}
                  f:useServiceAccountCredentials: {}
                f:image:
                  .: {}
                  f:repository: {}
                  f:tag: {}
                f:nodeSelector: {}
                f:port: {}
                f:proxyUrl: {}
                f:resources: {}
                f:tolerations: {}
                f:useLocalhost: {}
              f:component: {}
              f:enabled: {}
              f:global:
                .: {}
                f:cattle:
                  .: {}
                  f:clusterId: {}
                  f:clusterName: {}
                  f:systemDefaultRegistry: {}
                f:imagePullSecrets: {}
                f:kubectl:
                  .: {}
                  f:pullPolicy: {}
                  f:repository: {}
                  f:tag: {}
                f:rbac:
                  .: {}
                  f:create: {}
                  f:pspAnnotations: {}
                  f:pspEnabled: {}
                  f:userRoles:
                    .: {}
                    f:aggregateToDefaultRoles: {}
                    f:create: {}
                f:systemDefaultRegistry: {}
              f:metricsPort: {}
              f:proxy:
                .: {}
                f:command: {}
                f:enabled: {}
                f:image:
                  .: {}
                  f:repository: {}
                  f:tag: {}
                f:nodeSelector: {}
                f:port: {}
                f:resources: {}
                f:tolerations: {}
              f:serviceMonitor:
                .: {}
                f:enabled: {}
            f:rkeScheduler:
              .: {}
              f:clients:
                .: {}
                f:command: {}
                f:copyCertsImage:
                  .: {}
                  f:repository: {}
                  f:tag: {}
                f:enabled: {}
                f:https:
                  .: {}
                  f:caCertFile: {}
                  f:certDir: {}
                  f:certFile: {}
                  f:enabled: {}
                  f:insecureSkipVerify: {}
                  f:keyFile: {}
                  f:useServiceAccountCredentials: {}
                f:image:
                  .: {}
                  f:repository: {}
                  f:tag: {}
                f:nodeSelector:
                  .: {}
                  f:node-role.kubernetes.io/controlplane: {}
                f:port: {}
                f:proxyUrl: {}
                f:resources: {}
                f:tolerations: {}
                f:useLocalhost: {}
              f:component: {}
              f:enabled: {}
              f:global:
                .: {}
                f:cattle:
                  .: {}
                  f:clusterId: {}
                  f:clusterName: {}
                  f:systemDefaultRegistry: {}
                f:imagePullSecrets: {}
                f:kubectl:
                  .: {}
                  f:pullPolicy: {}
                  f:repository: {}
                  f:tag: {}
                f:rbac:
                  .: {}
                  f:create: {}
                  f:pspAnnotations: {}
                  f:pspEnabled: {}
                  f:userRoles:
                    .: {}
                    f:aggregateToDefaultRoles: {}
                    f:create: {}
                f:systemDefaultRegistry: {}
              f:metricsPort: {}
              f:proxy:
                .: {}
                f:command: {}
                f:enabled: {}
                f:image:
                  .: {}
                  f:repository: {}
                  f:tag: {}
                f:nodeSelector: {}
                f:port: {}
                f:resources: {}
                f:tolerations: {}
              f:serviceMonitor:
                .: {}
                f:enabled: {}
        f:helmVersion: {}
        f:info:
          .: {}
          f:description: {}
          f:firstDeployed: {}
          f:lastDeployed: {}
          f:notes: {}
          f:readme: {}
          f:status: {}
        f:name: {}
        f:namespace: {}
        f:resources: {}
        f:values:
          .: {}
          f:alertmanager:
            .: {}
            f:alertmanagerSpec:
              .: {}
              f:configSecret: {}
              f:useExistingSecret: {}
          f:global:
            .: {}
            f:cattle:
              .: {}
              f:clusterId: {}
              f:clusterName: {}
              f:systemDefaultRegistry: {}
            f:systemDefaultRegistry: {}
          f:prometheus:
            .: {}
            f:prometheusSpec:
              .: {}
              f:evaluationInterval: {}
              f:retentionSize: {}
              f:scrapeInterval: {}
          f:prometheusOperator:
            .: {}
            f:hostNetwork: {}
        f:version: {}
      f:status:
        .: {}
        f:observedGeneration: {}
        f:summary:
          .: {}
          f:state: {}
    manager: rancher
    operation: Update
    time: "2020-11-26T22:24:46Z"
  name: rancher-monitoring
  namespace: cattle-monitoring-system
  ownerReferences:
  - apiVersion: v1
    blockOwnerDeletion: false
    controller: true
    kind: Secret
    name: sh.helm.release.v1.rancher-monitoring.v1
    uid: f3a072f2-3319-48e1-92e3-f9e0a200968a
  resourceVersion: "952492"
  selfLink: /apis/catalog.cattle.io/v1/namespaces/cattle-monitoring-system/apps/rancher-monitoring
  uid: 1423957f-b0bb-4553-abb0-2be6294578ee
spec:
  chart:
    metadata:
      annotations:
        artifacthub.io/links: |
          - name: Chart Source
            url: https://github.com/prometheus-community/helm-charts
          - name: Upstream Project
            url: https://github.com/prometheus-operator/kube-prometheus
        artifacthub.io/operator: "true"
        catalog.cattle.io/auto-install: rancher-monitoring-crd=match
        catalog.cattle.io/certified: rancher
        catalog.cattle.io/display-name: Monitoring
        catalog.cattle.io/namespace: cattle-monitoring-system
        catalog.cattle.io/provides-gvr: monitoring.coreos.com.prometheus/v1
        catalog.cattle.io/release-name: rancher-monitoring
        catalog.cattle.io/ui-component: monitoring
        catalog.cattle.io/ui-source-repo: rancher-charts
        catalog.cattle.io/ui-source-repo-type: cluster
      apiVersion: v1
      appVersion: 0.38.1
      description: Collects several related Helm charts, Grafana dashboards, and Prometheus
        rules combined with documentation and scripts to provide easy to operate end-to-end
        Kubernetes cluster monitoring with Prometheus using the Prometheus Operator.
      home: https://github.com/prometheus-operator/kube-prometheus
      icon: https://raw.githubusercontent.com/prometheus/prometheus.github.io/master/assets/prometheus_logo-cb55bb5c346.png
      keywords:
      - operator
      - prometheus
      - kube-prometheus
      - monitoring
      maintainers:
      - name: vsliouniaev
      - name: bismarck
      - email: gianrubio@gmail.com
        name: gianrubio
      - email: github.gkarthiks@gmail.com
        name: gkarthiks
      - email: scott@r6by.com
        name: scottrigby
      - email: miroslav.hadzhiev@gmail.com
        name: Xtigyro
      name: rancher-monitoring
      sources:
      - https://github.com/prometheus-community/helm-charts
      - https://github.com/prometheus-operator/kube-prometheus
      version: 9.4.201
    values:
      additionalPrometheusRules: null
      alertmanager:
        alertmanagerSpec:
          additionalPeers: null
          affinity: {}
          configMaps: null
          containers: null
          externalUrl: null
          image:
            repository: rancher/prom-alertmanager
            sha: ""
            tag: v0.21.0
          listenLocal: false
          logFormat: logfmt
          logLevel: info
          nodeSelector: {}
          paused: false
          podAntiAffinity: ""
          podAntiAffinityTopologyKey: kubernetes.io/hostname
          podMetadata: {}
          portName: web
          priorityClassName: ""
          replicas: 1
          resources:
            limits:
              cpu: 1000m
              memory: 500Mi
            requests:
              cpu: 100m
              memory: 100Mi
          retention: 120h
          routePrefix: /
          secrets: null
          securityContext:
            fsGroup: 2000
            runAsGroup: 2000
            runAsNonRoot: true
            runAsUser: 1000
          storage: {}
          tolerations: null
          useExistingSecret: false
        apiVersion: v2
        config:
          global:
            resolve_timeout: 5m
          receivers:
          - name: "null"
          route:
            group_by:
            - job
            group_interval: 5m
            group_wait: 30s
            receiver: "null"
            repeat_interval: 12h
            routes:
            - match:
                alertname: Watchdog
              receiver: "null"
          templates:
          - /etc/alertmanager/config/*.tmpl
        enabled: true
        ingress:
          annotations: {}
          enabled: false
          hosts: null
          labels: {}
          paths: null
          tls: null
        ingressPerReplica:
          annotations: {}
          enabled: false
          hostDomain: ""
          hostPrefix: ""
          labels: {}
          paths: null
          tlsSecretName: ""
          tlsSecretPerReplica:
            enabled: false
            prefix: alertmanager
        podDisruptionBudget:
          enabled: false
          maxUnavailable: ""
          minAvailable: 1
        secret:
          annotations: {}
          cleanupOnUninstall: false
          image:
            pullPolicy: IfNotPresent
            repository: rancher/rancher-agent
            tag: v2.4.8
          securityContext:
            runAsNonRoot: true
            runAsUser: 1000
        service:
          annotations: {}
          clusterIP: ""
          externalIPs: null
          labels: {}
          loadBalancerIP: ""
          loadBalancerSourceRanges: null
          nodePort: 30903
          port: 9093
          targetPort: 9093
          type: ClusterIP
        serviceAccount:
          annotations: {}
          create: true
          name: ""
        serviceMonitor:
          interval: ""
          metricRelabelings: null
          relabelings: null
          selfMonitor: true
        servicePerReplica:
          annotations: {}
          enabled: false
          loadBalancerSourceRanges: null
          nodePort: 30904
          port: 9093
          targetPort: 9093
          type: ClusterIP
        templateFiles:
          rancher_defaults.tmpl: |-
            {{- define "slack.rancher.text" -}}
            {{ template "rancher.text_multiple" . }}
            {{- end -}}

            {{- define "rancher.text_multiple" -}}
            *[GROUP - Details]*
            One or more alarms in this group have triggered a notification.

            {{- if gt (len .GroupLabels.Values) 0 }}
            *Group Labels:*
              {{- range .GroupLabels.SortedPairs }}
              • *{{ .Name }}:* `{{ .Value }}`
              {{- end }}
            {{- end }}
            {{- if .ExternalURL }}
            *Link to AlertManager:* {{ .ExternalURL }}
            {{- end }}

            {{- range .Alerts }}
            {{ template "rancher.text_single" . }}
            {{- end }}
            {{- end -}}

            {{- define "rancher.text_single" -}}
            {{- if .Labels.alertname }}
            *[ALERT - {{ .Labels.alertname }}]*
            {{- else }}
            *[ALERT]*
            {{- end }}
            {{- if .Labels.severity }}
            *Severity:* `{{ .Labels.severity }}`
            {{- end }}
            {{- if .Labels.cluster }}
            *Cluster:*  {{ .Labels.cluster }}
            {{- end }}
            {{- if .Annotations.summary }}
            *Summary:* {{ .Annotations.summary }}
            {{- end }}
            {{- if .Annotations.message }}
            *Message:* {{ .Annotations.message }}
            {{- end }}
            {{- if .Annotations.description }}
            *Description:* {{ .Annotations.description }}
            {{- end }}
            {{- if .Annotations.runbook_url }}
            *Runbook URL:* <{{ .Annotations.runbook_url }}|:spiral_note_pad:>
            {{- end }}
            {{- with .Labels }}
            {{- with .Remove (stringSlice "alertname" "severity" "cluster") }}
            {{- if gt (len .) 0 }}
            *Additional Labels:*
              {{- range .SortedPairs }}
              • *{{ .Name }}:* `{{ .Value }}`
              {{- end }}
            {{- end }}
            {{- end }}
            {{- end }}
            {{- with .Annotations }}
            {{- with .Remove (stringSlice "summary" "message" "description" "runbook_url") }}
            {{- if gt (len .) 0 }}
            *Additional Annotations:*
              {{- range .SortedPairs }}
              • *{{ .Name }}:* `{{ .Value }}`
              {{- end }}
            {{- end }}
            {{- end }}
            {{- end }}
            {{- end -}}
        tplConfig: false
      commonLabels: {}
      coreDns:
        enabled: true
        service:
          port: 9153
          targetPort: 9153
        serviceMonitor:
          interval: ""
          metricRelabelings: null
          relabelings: null
      defaultRules:
        annotations: {}
        appNamespacesTarget: .*
        create: true
        labels: {}
        rules:
          alertmanager: true
          etcd: true
          general: true
          k8s: true
          kubeApiserver: true
          kubeApiserverAvailability: true
          kubeApiserverError: true
          kubeApiserverSlos: true
          kubePrometheusGeneral: true
          kubePrometheusNodeAlerting: true
          kubePrometheusNodeRecording: true
          kubeScheduler: true
          kubeStateMetrics: true
          kubelet: true
          kubernetesAbsent: true
          kubernetesApps: true
          kubernetesResources: true
          kubernetesStorage: true
          kubernetesSystem: true
          network: true
          node: true
          prometheus: true
          prometheusOperator: true
          time: true
        runbookUrl: https://github.com/kubernetes-monitoring/kubernetes-mixin/tree/master/runbook.md#
      fullnameOverride: ""
      global:
        cattle:
          systemDefaultRegistry: ""
        imagePullSecrets: null
        kubectl:
          pullPolicy: IfNotPresent
          repository: rancher/kubectl
          tag: v1.18.6
        rbac:
          create: true
          pspAnnotations: {}
          pspEnabled: true
          userRoles:
            aggregateToDefaultRoles: true
            create: true
      grafana:
        additionalDataSources: null
        admin:
          existingSecret: ""
          passwordKey: admin-password
          userKey: admin-user
        adminPassword: prom-operator
        adminUser: admin
        affinity: {}
        dashboardProviders: {}
        dashboards: {}
        dashboardsConfigMaps: {}
        datasources: {}
        defaultDashboardsEnabled: true
        deploymentStrategy:
          type: Recreate
        downloadDashboards:
          env: {}
          resources: {}
        downloadDashboardsImage:
          pullPolicy: IfNotPresent
          repository: rancher/curlimages-curl
          sha: ""
          tag: 7.70.0
        enabled: true
        env: {}
        envFromSecret: ""
        envRenderSecret: {}
        envValueFrom: {}
        extraConfigmapMounts: null
        extraContainerVolumes:
        - emptyDir: {}
          name: nginx-home
        - configMap:
            items:
            - key: nginx.conf
              mode: 438
              path: nginx.conf
            name: grafana-nginx-proxy-config
          name: grafana-nginx
        extraContainers: |
          - name: grafana-proxy
            args:
            - nginx
            - -g
            - daemon off;
            - -c
            - /nginx/nginx.conf
            image: "{{ template "system_default_registry" . }}{{ .Values.proxy.image.repository }}:{{ .Values.proxy.image.tag }}"
            ports:
            - containerPort: 8080
              name: nginx-http
              protocol: TCP
            volumeMounts:
            - mountPath: /nginx
              name: grafana-nginx
            - mountPath: /var/cache/nginx
              name: nginx-home
            securityContext:
              runAsUser: 101
              runAsGroup: 101
        extraEmptyDirMounts: null
        extraExposePorts: null
        extraInitContainers: null
        extraSecretMounts: null
        extraVolumeMounts: null
        global:
          cattle:
            clusterId: local
            clusterName: local
            systemDefaultRegistry: ""
          imagePullSecrets: null
          kubectl:
            pullPolicy: IfNotPresent
            repository: rancher/kubectl
            tag: v1.18.6
          rbac:
            create: true
            pspAnnotations: {}
            pspEnabled: true
            userRoles:
              aggregateToDefaultRoles: true
              create: true
          systemDefaultRegistry: ""
        grafana.ini:
          analytics:
            check_for_updates: true
          auth:
            disable_login_form: false
          auth.anonymous:
            enabled: true
            org_role: Viewer
          auth.basic:
            enabled: false
          dashboards:
            default_home_dashboard_path: /tmp/dashboards/rancher-default-home.json
          grafana_net:
            url: https://grafana.net
          log:
            mode: console
          paths:
            data: /var/lib/grafana/data
            logs: /var/log/grafana
            plugins: /var/lib/grafana/plugins
            provisioning: /etc/grafana/provisioning
          users:
            auto_assign_org_role: Viewer
        hostAliases: null
        image:
          pullPolicy: IfNotPresent
          repository: rancher/grafana-grafana
          sha: ""
          tag: 7.1.5
        ingress:
          annotations: {}
          enabled: false
          extraPaths: null
          hosts: null
          labels: {}
          path: /
          tls: null
        initChownData:
          enabled: true
          image:
            pullPolicy: IfNotPresent
            repository: rancher/library-busybox
            sha: ""
            tag: 1.31.1
          resources: {}
        ldap:
          config: ""
          enabled: false
          existingSecret: ""
        livenessProbe:
          failureThreshold: 10
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 60
          timeoutSeconds: 30
        namespaceOverride: ""
        nodeSelector: {}
        notifiers: {}
        persistence:
          accessModes:
          - ReadWriteOnce
          enabled: false
          finalizers:
          - kubernetes.io/pvc-protection
          size: 10Gi
          type: pvc
        plugins: null
        podDisruptionBudget: {}
        podPortName: grafana
        proxy:
          image:
            repository: rancher/library-nginx
            tag: 1.19.2-alpine
        rbac:
          create: true
          extraClusterRoleRules: null
          extraRoleRules: null
          namespaced: false
          pspAnnotations: {}
          pspEnabled: true
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
        replicas: 1
        resources:
          limits:
            cpu: 200m
            memory: 200Mi
          requests:
            cpu: 100m
            memory: 100Mi
        securityContext:
          fsGroup: 472
          runAsGroup: 472
          runAsNonRoot: true
          runAsUser: 472
        service:
          annotations: {}
          labels: {}
          nodePort: 30950
          port: 80
          portName: nginx-http
          targetPort: 8080
          type: ClusterIP
        serviceAccount:
          create: true
        serviceMonitor:
          enabled: false
          interval: ""
          labels: {}
          metricRelabelings: null
          path: /metrics
          relabelings: null
          scrapeTimeout: 30s
          selfMonitor: true
        sidecar:
          dashboards:
            SCProvider: true
            annotations: {}
            defaultFolderName: null
            enabled: true
            folder: /tmp/dashboards
            label: grafana_dashboard
            provider:
              allowUiUpdates: false
              disableDelete: false
              folder: ""
              name: sidecarProvider
              orgid: 1
              type: file
            searchNamespace: cattle-dashboards
          datasources:
            annotations: {}
            createPrometheusReplicasDatasources: false
            defaultDatasourceEnabled: true
            enabled: true
            label: grafana_datasource
            searchNamespace: null
          enableUniqueFilenames: false
          image:
            repository: rancher/kiwigrid-k8s-sidecar
            sha: ""
            tag: 0.1.151
          imagePullPolicy: IfNotPresent
          notifiers:
            enabled: false
            label: grafana_notifier
          resources: {}
        smtp:
          existingSecret: ""
          passwordKey: password
          userKey: user
        testFramework:
          enabled: true
          image: rancher/bats-bats
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsNonRoot: true
            runAsUser: 1000
          tag: v1.1.0
        tolerations: null
      k3sServer:
        clients:
          command:
          - pushprox-client
          copyCertsImage:
            repository: rancher/library-busybox
            tag: 1.31.1
          enabled: true
          https:
            caCertFile: ""
            certDir: ""
            certFile: ""
            enabled: false
            insecureSkipVerify: false
            keyFile: ""
            useServiceAccountCredentials: false
          image:
            repository: rancher/pushprox-client
            tag: v0.1.0-rancher1-client
          nodeSelector: {}
          port: 10013
          proxyUrl: ""
          resources: {}
          tolerations:
          - effect: NoExecute
            operator: Exists
          - effect: NoSchedule
            operator: Exists
          useLocalhost: true
        component: k3s-server
        enabled: false
        global:
          cattle:
            clusterId: local
            clusterName: local
            systemDefaultRegistry: ""
          imagePullSecrets: null
          kubectl:
            pullPolicy: IfNotPresent
            repository: rancher/kubectl
            tag: v1.18.6
          rbac:
            create: true
            pspAnnotations: {}
            pspEnabled: true
            userRoles:
              aggregateToDefaultRoles: true
              create: true
          systemDefaultRegistry: ""
        metricsPort: 10249
        proxy:
          command:
          - pushprox-proxy
          enabled: true
          image:
            repository: rancher/pushprox-proxy
            tag: v0.1.0-rancher1-proxy
          nodeSelector: {}
          port: 8080
          resources: {}
          tolerations: null
        serviceMonitor:
          enabled: true
      kube-state-metrics:
        affinity: {}
        autosharding:
          enabled: false
        collectors:
          certificatesigningrequests: true
          configmaps: true
          cronjobs: true
          daemonsets: true
          deployments: true
          endpoints: true
          horizontalpodautoscalers: true
          ingresses: true
          jobs: true
          limitranges: true
          mutatingwebhookconfigurations: true
          namespaces: true
          networkpolicies: true
          nodes: true
          persistentvolumeclaims: true
          persistentvolumes: true
          poddisruptionbudgets: true
          pods: true
          replicasets: true
          replicationcontrollers: true
          resourcequotas: true
          secrets: true
          services: true
          statefulsets: true
          storageclasses: true
          validatingwebhookconfigurations: true
          verticalpodautoscalers: false
          volumeattachments: true
        customLabels: {}
        global:
          cattle:
            clusterId: local
            clusterName: local
            systemDefaultRegistry: ""
          imagePullSecrets: null
          kubectl:
            pullPolicy: IfNotPresent
            repository: rancher/kubectl
            tag: v1.18.6
          rbac:
            create: true
            pspAnnotations: {}
            pspEnabled: true
            userRoles:
              aggregateToDefaultRoles: true
              create: true
          systemDefaultRegistry: ""
        hostNetwork: false
        image:
          pullPolicy: IfNotPresent
          repository: rancher/coreos-kube-state-metrics
          tag: v1.9.7
        imagePullSecrets: null
        kubeTargetVersionOverride: ""
        namespaceOverride: ""
        nodeSelector: {}
        podAnnotations: {}
        podDisruptionBudget: {}
        podSecurityPolicy:
          additionalVolumes: null
          annotations: {}
          enabled: true
        prometheus:
          monitor:
            additionalLabels: {}
            enabled: false
            honorLabels: false
            namespace: ""
        prometheusScrape: true
        rbac:
          create: true
        replicas: 1
        resources:
          limits:
            cpu: 100m
            memory: 200Mi
          requests:
            cpu: 100m
            memory: 130Mi
        securityContext:
          enabled: true
          fsGroup: 65534
          runAsGroup: 65534
          runAsNonRoot: true
          runAsUser: 65534
        service:
          annotations: {}
          loadBalancerIP: ""
          nodePort: 0
          port: 8080
          type: ClusterIP
        serviceAccount:
          annotations: {}
          create: true
          imagePullSecrets: null
        tolerations: null
      kubeAdmControllerManager:
        clients:
          command:
          - pushprox-client
          copyCertsImage:
            repository: rancher/library-busybox
            tag: 1.31.1
          enabled: true
          https:
            caCertFile: ""
            certDir: ""
            certFile: ""
            enabled: true
            insecureSkipVerify: true
            keyFile: ""
            useServiceAccountCredentials: true
          image:
            repository: rancher/pushprox-client
            tag: v0.1.0-rancher1-client
          nodeSelector:
            node-role.kubernetes.io/master: ""
          port: 10011
          proxyUrl: ""
          resources: {}
          tolerations:
          - effect: NoExecute
            operator: Exists
          - effect: NoSchedule
            operator: Exists
          useLocalhost: true
        component: kube-controller-manager
        enabled: false
        global:
          cattle:
            clusterId: local
            clusterName: local
            systemDefaultRegistry: ""
          imagePullSecrets: null
          kubectl:
            pullPolicy: IfNotPresent
            repository: rancher/kubectl
            tag: v1.18.6
          rbac:
            create: true
            pspAnnotations: {}
            pspEnabled: true
            userRoles:
              aggregateToDefaultRoles: true
              create: true
          systemDefaultRegistry: ""
        metricsPort: 10257
        proxy:
          command:
          - pushprox-proxy
          enabled: true
          image:
            repository: rancher/pushprox-proxy
            tag: v0.1.0-rancher1-proxy
          nodeSelector: {}
          port: 8080
          resources: {}
          tolerations: null
        serviceMonitor:
          enabled: true
      kubeAdmEtcd:
        clients:
          command:
          - pushprox-client
          copyCertsImage:
            repository: rancher/library-busybox
            tag: 1.31.1
          enabled: true
          https:
            caCertFile: ""
            certDir: ""
            certFile: ""
            enabled: false
            insecureSkipVerify: false
            keyFile: ""
            useServiceAccountCredentials: false
          image:
            repository: rancher/pushprox-client
            tag: v0.1.0-rancher1-client
          nodeSelector:
            node-role.kubernetes.io/master: ""
          port: 10014
          proxyUrl: ""
          resources: {}
          tolerations:
          - effect: NoExecute
            operator: Exists
          - effect: NoSchedule
            operator: Exists
          useLocalhost: true
        component: kube-etcd
        enabled: false
        global:
          cattle:
            clusterId: local
            clusterName: local
            systemDefaultRegistry: ""
          imagePullSecrets: null
          kubectl:
            pullPolicy: IfNotPresent
            repository: rancher/kubectl
            tag: v1.18.6
          rbac:
            create: true
            pspAnnotations: {}
            pspEnabled: true
            userRoles:
              aggregateToDefaultRoles: true
              create: true
          systemDefaultRegistry: ""
        metricsPort: 2381
        proxy:
          command:
          - pushprox-proxy
          enabled: true
          image:
            repository: rancher/pushprox-proxy
            tag: v0.1.0-rancher1-proxy
          nodeSelector: {}
          port: 8080
          resources: {}
          tolerations: null
        serviceMonitor:
          enabled: true
      kubeAdmProxy:
        clients:
          command:
          - pushprox-client
          copyCertsImage:
            repository: rancher/library-busybox
            tag: 1.31.1
          enabled: true
          https:
            caCertFile: ""
            certDir: ""
            certFile: ""
            enabled: false
            insecureSkipVerify: false
            keyFile: ""
            useServiceAccountCredentials: false
          image:
            repository: rancher/pushprox-client
            tag: v0.1.0-rancher1-client
          nodeSelector: {}
          port: 10013
          proxyUrl: ""
          resources: {}
          tolerations:
          - effect: NoExecute
            operator: Exists
          - effect: NoSchedule
            operator: Exists
          useLocalhost: true
        component: kube-proxy
        enabled: false
        global:
          cattle:
            clusterId: local
            clusterName: local
            systemDefaultRegistry: ""
          imagePullSecrets: null
          kubectl:
            pullPolicy: IfNotPresent
            repository: rancher/kubectl
            tag: v1.18.6
          rbac:
            create: true
            pspAnnotations: {}
            pspEnabled: true
            userRoles:
              aggregateToDefaultRoles: true
              create: true
          systemDefaultRegistry: ""
        metricsPort: 10249
        proxy:
          command:
          - pushprox-proxy
          enabled: true
          image:
            repository: rancher/pushprox-proxy
            tag: v0.1.0-rancher1-proxy
          nodeSelector: {}
          port: 8080
          resources: {}
          tolerations: null
        serviceMonitor:
          enabled: true
      kubeAdmScheduler:
        clients:
          command:
          - pushprox-client
          copyCertsImage:
            repository: rancher/library-busybox
            tag: 1.31.1
          enabled: true
          https:
            caCertFile: ""
            certDir: ""
            certFile: ""
            enabled: true
            insecureSkipVerify: true
            keyFile: ""
            useServiceAccountCredentials: true
          image:
            repository: rancher/pushprox-client
            tag: v0.1.0-rancher1-client
          nodeSelector:
            node-role.kubernetes.io/master: ""
          port: 10012
          proxyUrl: ""
          resources: {}
          tolerations:
          - effect: NoExecute
            operator: Exists
          - effect: NoSchedule
            operator: Exists
          useLocalhost: true
        component: kube-scheduler
        enabled: false
        global:
          cattle:
            clusterId: local
            clusterName: local
            systemDefaultRegistry: ""
          imagePullSecrets: null
          kubectl:
            pullPolicy: IfNotPresent
            repository: rancher/kubectl
            tag: v1.18.6
          rbac:
            create: true
            pspAnnotations: {}
            pspEnabled: true
            userRoles:
              aggregateToDefaultRoles: true
              create: true
          systemDefaultRegistry: ""
        metricsPort: 10259
        proxy:
          command:
          - pushprox-proxy
          enabled: true
          image:
            repository: rancher/pushprox-proxy
            tag: v0.1.0-rancher1-proxy
          nodeSelector: {}
          port: 8080
          resources: {}
          tolerations: null
        serviceMonitor:
          enabled: true
      kubeApiServer:
        enabled: true
        relabelings: null
        serviceMonitor:
          interval: ""
          jobLabel: component
          metricRelabelings: null
          selector:
            matchLabels:
              component: apiserver
              provider: kubernetes
        tlsConfig:
          insecureSkipVerify: false
          serverName: kubernetes
      kubeControllerManager:
        enabled: false
        endpoints: null
        service:
          port: 10252
          targetPort: 10252
        serviceMonitor:
          https: false
          insecureSkipVerify: null
          interval: ""
          metricRelabelings: null
          relabelings: null
          serverName: null
      kubeDns:
        enabled: false
        service:
          dnsmasq:
            port: 10054
            targetPort: 10054
          skydns:
            port: 10055
            targetPort: 10055
        serviceMonitor:
          dnsmasqMetricRelabelings: null
          dnsmasqRelabelings: null
          interval: ""
          metricRelabelings: null
          relabelings: null
      kubeEtcd:
        enabled: false
        endpoints: null
        service:
          port: 2379
          targetPort: 2379
        serviceMonitor:
          caFile: ""
          certFile: ""
          insecureSkipVerify: false
          interval: ""
          keyFile: ""
          metricRelabelings: null
          relabelings: null
          scheme: http
          serverName: ""
      kubeProxy:
        enabled: false
        endpoints: null
        service:
          port: 10249
          targetPort: 10249
        serviceMonitor:
          https: false
          interval: ""
          metricRelabelings: null
          relabelings: null
      kubeScheduler:
        enabled: false
        endpoints: null
        service:
          port: 10251
          targetPort: 10251
        serviceMonitor:
          https: false
          insecureSkipVerify: null
          interval: ""
          metricRelabelings: null
          relabelings: null
          serverName: null
      kubeStateMetrics:
        enabled: true
        serviceMonitor:
          interval: ""
          metricRelabelings: null
          relabelings: null
      kubeTargetVersionOverride: ""
      kubelet:
        enabled: true
        namespace: kube-system
        serviceMonitor:
          cAdvisor: true
          cAdvisorMetricRelabelings: null
          cAdvisorRelabelings:
          - sourceLabels:
            - __metrics_path__
            targetLabel: metrics_path
          https: true
          interval: ""
          metricRelabelings: null
          probes: true
          probesMetricRelabelings: null
          probesRelabelings:
          - sourceLabels:
            - __metrics_path__
            targetLabel: metrics_path
          relabelings:
          - sourceLabels:
            - __metrics_path__
            targetLabel: metrics_path
          resource: true
          resourcePath: /metrics/resource/v1alpha1
          resourceRelabelings:
          - sourceLabels:
            - __metrics_path__
            targetLabel: metrics_path
      nameOverride: rancher-monitoring
      namespaceOverride: cattle-monitoring-system
      nodeExporter:
        enabled: true
        jobLabel: jobLabel
        serviceMonitor:
          interval: ""
          metricRelabelings: null
          relabelings: null
          scrapeTimeout: ""
      prometheus:
        additionalPodMonitors: null
        additionalServiceMonitors: null
        annotations: {}
        enabled: true
        ingress:
          annotations: {}
          enabled: false
          hosts: null
          labels: {}
          paths: null
          tls: null
        ingressPerReplica:
          annotations: {}
          enabled: false
          hostDomain: ""
          hostPrefix: ""
          labels: {}
          paths: null
          tlsSecretName: ""
          tlsSecretPerReplica:
            enabled: false
            prefix: prometheus
        podDisruptionBudget:
          enabled: false
          maxUnavailable: ""
          minAvailable: 1
        podSecurityPolicy:
          allowedCapabilities: null
        prometheusSpec:
          additionalAlertManagerConfigs: null
          additionalAlertRelabelConfigs: null
          additionalPrometheusSecretsAnnotations: {}
          additionalScrapeConfigs: null
          additionalScrapeConfigsSecret: {}
          affinity: {}
          alertingEndpoints: null
          apiserverConfig: {}
          configMaps: null
          containers: |
            - name: prometheus-proxy
              args:
              - nginx
              - -g
              - daemon off;
              - -c
              - /nginx/nginx.conf
              image: "{{ template "system_default_registry" . }}{{ .Values.prometheus.prometheusSpec.proxy.image.repository }}:{{ .Values.prometheus.prometheusSpec.proxy.image.tag }}"
              ports:
              - containerPort: 8080
                name: nginx-http
                protocol: TCP
              volumeMounts:
              - mountPath: /nginx
                name: prometheus-nginx
              - mountPath: /var/cache/nginx
                name: nginx-home
              securityContext:
                runAsUser: 101
                runAsGroup: 101
          disableCompaction: false
          enableAdminAPI: false
          evaluationInterval: ""
          externalLabels: {}
          externalUrl: ""
          ignoreNamespaceSelectors: false
          image:
            repository: rancher/prom-prometheus
            sha: ""
            tag: v2.18.2
          initContainers: null
          listenLocal: false
          logFormat: logfmt
          logLevel: info
          nodeSelector: {}
          paused: false
          podAntiAffinity: ""
          podAntiAffinityTopologyKey: kubernetes.io/hostname
          podMetadata: {}
          podMonitorNamespaceSelector: {}
          podMonitorSelector: {}
          podMonitorSelectorNilUsesHelmValues: false
          portName: nginx-http
          priorityClassName: ""
          prometheusExternalLabelName: ""
          prometheusExternalLabelNameClear: false
          proxy:
            image:
              repository: rancher/library-nginx
              tag: 1.19.2-alpine
          query: {}
          remoteRead: null
          remoteWrite: null
          remoteWriteDashboards: false
          replicaExternalLabelName: ""
          replicaExternalLabelNameClear: false
          replicas: 1
          resources:
            limits:
              cpu: 1000m
              memory: 1500Mi
            requests:
              cpu: 750m
              memory: 750Mi
          retention: 10d
          retentionSize: ""
          routePrefix: /
          ruleNamespaceSelector: {}
          ruleSelector: {}
          ruleSelectorNilUsesHelmValues: false
          scrapeInterval: ""
          secrets: null
          securityContext:
            fsGroup: 2000
            runAsGroup: 2000
            runAsNonRoot: true
            runAsUser: 1000
          serviceMonitorNamespaceSelector: {}
          serviceMonitorSelector: {}
          serviceMonitorSelectorNilUsesHelmValues: false
          storageSpec: {}
          thanos: {}
          tolerations: null
          volumeMounts: null
          volumes:
          - emptyDir: {}
            name: nginx-home
          - configMap:
              defaultMode: 438
              name: prometheus-nginx-proxy-config
            name: prometheus-nginx
          walCompression: false
        service:
          annotations: {}
          clusterIP: ""
          externalIPs: null
          labels: {}
          loadBalancerIP: ""
          loadBalancerSourceRanges: null
          nodePort: 30090
          port: 9090
          sessionAffinity: ""
          targetPort: 8080
          type: ClusterIP
        serviceAccount:
          create: true
          name: ""
        serviceMonitor:
          bearerTokenFile: null
          interval: ""
          metricRelabelings: null
          relabelings: null
          scheme: ""
          selfMonitor: true
          tlsConfig: {}
        servicePerReplica:
          annotations: {}
          enabled: false
          loadBalancerSourceRanges: null
          nodePort: 30091
          port: 9090
          targetPort: 9090
          type: ClusterIP
        thanosIngress:
          annotations: {}
          enabled: false
          hosts: null
          labels: {}
          paths: null
          servicePort: 10901
          tls: null
      prometheus-adapter:
        affinity: {}
        enabled: true
        extraVolumeMounts: null
        extraVolumes: null
        global:
          cattle:
            clusterId: local
            clusterName: local
            systemDefaultRegistry: ""
          imagePullSecrets: null
          kubectl:
            pullPolicy: IfNotPresent
            repository: rancher/kubectl
            tag: v1.18.6
          rbac:
            create: true
            pspAnnotations: {}
            pspEnabled: true
            userRoles:
              aggregateToDefaultRoles: true
              create: true
          systemDefaultRegistry: ""
        hostNetwork:
          enabled: false
        image:
          pullPolicy: IfNotPresent
          pullSecrets: {}
          repository: rancher/directxman12-k8s-prometheus-adapter-amd64
          tag: v0.6.0
        listenPort: 6443
        logLevel: 4
        metricsRelistInterval: 1m
        nodeSelector: {}
        podAnnotations: {}
        podLabels: {}
        priorityClassName: ""
        prometheus:
          path: ""
          port: 9090
          url: http://rancher-monitoring-prometheus.cattle-monitoring-system.svc
        rbac:
          create: true
        replicas: 1
        resources: {}
        rules:
          custom: null
          default: true
          external: null
          resource: {}
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
        service:
          annotations: {}
          port: 443
          type: ClusterIP
        serviceAccount:
          create: true
        tls:
          ca: '# Public CA file that signed the APIService'
          certificate: '# Public key of the APIService'
          enable: false
          key: '# Private key of the APIService'
        tolerations: null
      prometheus-node-exporter:
        affinity: {}
        configmaps: null
        endpoints: null
        extraArgs:
        - --collector.filesystem.ignored-mount-points=^/(dev|proc|sys|var/lib/docker/.+)($|/)
        - --collector.filesystem.ignored-fs-types=^(autofs|binfmt_misc|cgroup|configfs|debugfs|devpts|devtmpfs|fusectl|hugetlbfs|mqueue|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|sysfs|tracefs)$
        extraHostVolumeMounts: null
        global:
          cattle:
            clusterId: local
            clusterName: local
            systemDefaultRegistry: ""
          imagePullSecrets: null
          kubectl:
            pullPolicy: IfNotPresent
            repository: rancher/kubectl
            tag: v1.18.6
          rbac:
            create: true
            pspAnnotations: {}
            pspEnabled: true
            userRoles:
              aggregateToDefaultRoles: true
              create: true
          systemDefaultRegistry: ""
        hostNetwork: true
        image:
          pullPolicy: IfNotPresent
          repository: rancher/prom-node-exporter
          tag: v1.0.1
        namespaceOverride: ""
        nodeSelector: {}
        podAnnotations: {}
        podLabels:
          jobLabel: node-exporter
        prometheus:
          monitor:
            additionalLabels: {}
            enabled: false
            namespace: ""
            relabelings: null
            scrapeTimeout: 10s
        rbac:
          create: true
          pspEnabled: true
        resources:
          limits:
            cpu: 200m
            memory: 50Mi
          requests:
            cpu: 100m
            memory: 30Mi
        securityContext:
          fsGroup: 65534
          runAsGroup: 65534
          runAsNonRoot: true
          runAsUser: 65534
        service:
          annotations:
            prometheus.io/scrape: "true"
          listenOnAllInterfaces: true
          nodePort: null
          port: 9796
          targetPort: 9796
          type: ClusterIP
        serviceAccount:
          create: true
          imagePullSecrets: null
        sidecarVolumeMount: null
        sidecars: null
        tolerations:
        - effect: NoSchedule
          operator: Exists
        updateStrategy:
          rollingUpdate:
            maxUnavailable: 1
          type: RollingUpdate
      prometheusOperator:
        admissionWebhooks:
          enabled: true
          failurePolicy: Fail
          patch:
            affinity: {}
            enabled: true
            image:
              pullPolicy: IfNotPresent
              repository: rancher/jettech-kube-webhook-certgen
              sha: ""
              tag: v1.2.1
            nodeSelector: {}
            podAnnotations: {}
            priorityClassName: ""
            resources: {}
            tolerations: null
        affinity: {}
        cleanupCustomResource: false
        configReloaderCpu: 100m
        configReloaderMemory: 25Mi
        configmapReloadImage:
          repository: rancher/jimmidyson-configmap-reload
          sha: ""
          tag: v0.3.0
        createCustomResource: true
        denyNamespaces: null
        enabled: true
        hostNetwork: false
        image:
          pullPolicy: IfNotPresent
          repository: rancher/coreos-prometheus-operator
          sha: ""
          tag: v0.38.1
        kubeletService:
          enabled: true
          namespace: kube-system
        manageCrds: true
        namespaces: {}
        nodeSelector: {}
        podAnnotations: {}
        podLabels: {}
        prometheusConfigReloaderImage:
          repository: rancher/coreos-prometheus-config-reloader
          sha: ""
          tag: v0.38.1
        resources:
          limits:
            cpu: 200m
            memory: 500Mi
          requests:
            cpu: 100m
            memory: 100Mi
        secretFieldSelector: ""
        securityContext:
          fsGroup: 65534
          runAsGroup: 65534
          runAsNonRoot: true
          runAsUser: 65534
        service:
          additionalPorts: null
          annotations: {}
          clusterIP: ""
          externalIPs: null
          labels: {}
          loadBalancerIP: ""
          loadBalancerSourceRanges: null
          nodePort: 30080
          nodePortTls: 30443
          type: ClusterIP
        serviceAccount:
          create: true
          name: ""
        serviceMonitor:
          interval: ""
          metricRelabelings: null
          relabelings: null
          scrapeTimeout: ""
          selfMonitor: true
        tlsProxy:
          enabled: true
          image:
            pullPolicy: IfNotPresent
            repository: rancher/squareup-ghostunnel
            sha: ""
            tag: v1.5.2
          resources: {}
        tolerations: null
      rke2ControllerManager:
        clients:
          command:
          - pushprox-client
          copyCertsImage:
            repository: rancher/library-busybox
            tag: 1.31.1
          enabled: true
          https:
            caCertFile: ""
            certDir: ""
            certFile: ""
            enabled: false
            insecureSkipVerify: false
            keyFile: ""
            useServiceAccountCredentials: false
          image:
            repository: rancher/pushprox-client
            tag: v0.1.0-rancher1-client
          nodeSelector:
            node-role.kubernetes.io/master: "true"
          port: 10011
          proxyUrl: ""
          resources: {}
          tolerations:
          - effect: NoExecute
            operator: Exists
          - effect: NoSchedule
            operator: Exists
          useLocalhost: true
        component: kube-controller-manager
        enabled: false
        global:
          cattle:
            clusterId: local
            clusterName: local
            systemDefaultRegistry: ""
          imagePullSecrets: null
          kubectl:
            pullPolicy: IfNotPresent
            repository: rancher/kubectl
            tag: v1.18.6
          rbac:
            create: true
            pspAnnotations: {}
            pspEnabled: true
            userRoles:
              aggregateToDefaultRoles: true
              create: true
          systemDefaultRegistry: ""
        metricsPort: 10252
        proxy:
          command:
          - pushprox-proxy
          enabled: true
          image:
            repository: rancher/pushprox-proxy
            tag: v0.1.0-rancher1-proxy
          nodeSelector: {}
          port: 8080
          resources: {}
          tolerations: null
        serviceMonitor:
          enabled: true
      rke2Etcd:
        clients:
          command:
          - pushprox-client
          copyCertsImage:
            repository: rancher/library-busybox
            tag: 1.31.1
          enabled: true
          https:
            caCertFile: ""
            certDir: ""
            certFile: ""
            enabled: false
            insecureSkipVerify: false
            keyFile: ""
            useServiceAccountCredentials: false
          image:
            repository: rancher/pushprox-client
            tag: v0.1.0-rancher1-client
          nodeSelector:
            node-role.kubernetes.io/etcd: "true"
          port: 10014
          proxyUrl: ""
          resources: {}
          tolerations:
          - effect: NoSchedule
            key: node-role.kubernetes.io/master
            operator: Equal
          useLocalhost: true
        component: kube-etcd
        enabled: false
        global:
          cattle:
            clusterId: local
            clusterName: local
            systemDefaultRegistry: ""
          imagePullSecrets: null
          kubectl:
            pullPolicy: IfNotPresent
            repository: rancher/kubectl
            tag: v1.18.6
          rbac:
            create: true
            pspAnnotations: {}
            pspEnabled: true
            userRoles:
              aggregateToDefaultRoles: true
              create: true
          systemDefaultRegistry: ""
        metricsPort: 2381
        proxy:
          command:
          - pushprox-proxy
          enabled: true
          image:
            repository: rancher/pushprox-proxy
            tag: v0.1.0-rancher1-proxy
          nodeSelector: {}
          port: 8080
          resources: {}
          tolerations: null
        serviceMonitor:
          enabled: true
      rke2Proxy:
        clients:
          command:
          - pushprox-client
          copyCertsImage:
            repository: rancher/library-busybox
            tag: 1.31.1
          enabled: true
          https:
            caCertFile: ""
            certDir: ""
            certFile: ""
            enabled: false
            insecureSkipVerify: false
            keyFile: ""
            useServiceAccountCredentials: false
          image:
            repository: rancher/pushprox-client
            tag: v0.1.0-rancher1-client
          nodeSelector: {}
          port: 10013
          proxyUrl: ""
          resources: {}
          tolerations: null
          useLocalhost: true
        component: kube-proxy
        enabled: false
        global:
          cattle:
            clusterId: local
            clusterName: local
            systemDefaultRegistry: ""
          imagePullSecrets: null
          kubectl:
            pullPolicy: IfNotPresent
            repository: rancher/kubectl
            tag: v1.18.6
          rbac:
            create: true
            pspAnnotations: {}
            pspEnabled: true
            userRoles:
              aggregateToDefaultRoles: true
              create: true
          systemDefaultRegistry: ""
        metricsPort: 10249
        proxy:
          command:
          - pushprox-proxy
          enabled: true
          image:
            repository: rancher/pushprox-proxy
            tag: v0.1.0-rancher1-proxy
          nodeSelector: {}
          port: 8080
          resources: {}
          tolerations: null
        serviceMonitor:
          enabled: true
        tolerations:
        - effect: NoExecute
          operator: Exists
        - effect: NoSchedule
          operator: Exists
      rke2Scheduler:
        clients:
          command:
          - pushprox-client
          copyCertsImage:
            repository: rancher/library-busybox
            tag: 1.31.1
          enabled: true
          https:
            caCertFile: ""
            certDir: ""
            certFile: ""
            enabled: false
            insecureSkipVerify: false
            keyFile: ""
            useServiceAccountCredentials: false
          image:
            repository: rancher/pushprox-client
            tag: v0.1.0-rancher1-client
          nodeSelector:
            node-role.kubernetes.io/master: "true"
          port: 10012
          proxyUrl: ""
          resources: {}
          tolerations:
          - effect: NoExecute
            operator: Exists
          - effect: NoSchedule
            operator: Exists
          useLocalhost: true
        component: kube-scheduler
        enabled: false
        global:
          cattle:
            clusterId: local
            clusterName: local
            systemDefaultRegistry: ""
          imagePullSecrets: null
          kubectl:
            pullPolicy: IfNotPresent
            repository: rancher/kubectl
            tag: v1.18.6
          rbac:
            create: true
            pspAnnotations: {}
            pspEnabled: true
            userRoles:
              aggregateToDefaultRoles: true
              create: true
          systemDefaultRegistry: ""
        metricsPort: 10251
        proxy:
          command:
          - pushprox-proxy
          enabled: true
          image:
            repository: rancher/pushprox-proxy
            tag: v0.1.0-rancher1-proxy
          nodeSelector: {}
          port: 8080
          resources: {}
          tolerations: null
        serviceMonitor:
          enabled: true
      rkeControllerManager:
        clients:
          command:
          - pushprox-client
          copyCertsImage:
            repository: rancher/library-busybox
            tag: 1.31.1
          enabled: true
          https:
            caCertFile: ""
            certDir: ""
            certFile: ""
            enabled: false
            insecureSkipVerify: false
            keyFile: ""
            useServiceAccountCredentials: false
          image:
            repository: rancher/pushprox-client
            tag: v0.1.0-rancher1-client
          nodeSelector:
            node-role.kubernetes.io/controlplane: "true"
          port: 10011
          proxyUrl: ""
          resources: {}
          tolerations:
          - effect: NoExecute
            operator: Exists
          - effect: NoSchedule
            operator: Exists
          useLocalhost: true
        component: kube-controller-manager
        enabled: false
        global:
          cattle:
            clusterId: local
            clusterName: local
            systemDefaultRegistry: ""
          imagePullSecrets: null
          kubectl:
            pullPolicy: IfNotPresent
            repository: rancher/kubectl
            tag: v1.18.6
          rbac:
            create: true
            pspAnnotations: {}
            pspEnabled: true
            userRoles:
              aggregateToDefaultRoles: true
              create: true
          systemDefaultRegistry: ""
        metricsPort: 10252
        proxy:
          command:
          - pushprox-proxy
          enabled: true
          image:
            repository: rancher/pushprox-proxy
            tag: v0.1.0-rancher1-proxy
          nodeSelector: {}
          port: 8080
          resources: {}
          tolerations: null
        serviceMonitor:
          enabled: true
      rkeEtcd:
        clients:
          command:
          - pushprox-client
          copyCertsImage:
            repository: rancher/library-busybox
            tag: 1.31.1
          enabled: true
          https:
            caCertFile: kube-ca.pem
            certDir: /etc/kubernetes/ssl
            certFile: kube-etcd-*.pem
            enabled: true
            insecureSkipVerify: false
            keyFile: kube-etcd-*-key.pem
            useServiceAccountCredentials: false
          image:
            repository: rancher/pushprox-client
            tag: v0.1.0-rancher1-client
          nodeSelector:
            node-role.kubernetes.io/etcd: "true"
          port: 10014
          proxyUrl: ""
          resources: {}
          tolerations:
          - effect: NoExecute
            operator: Exists
          - effect: NoSchedule
            operator: Exists
          useLocalhost: false
        component: kube-etcd
        enabled: false
        global:
          cattle:
            clusterId: local
            clusterName: local
            systemDefaultRegistry: ""
          imagePullSecrets: null
          kubectl:
            pullPolicy: IfNotPresent
            repository: rancher/kubectl
            tag: v1.18.6
          rbac:
            create: true
            pspAnnotations: {}
            pspEnabled: true
            userRoles:
              aggregateToDefaultRoles: true
              create: true
          systemDefaultRegistry: ""
        metricsPort: 2379
        proxy:
          command:
          - pushprox-proxy
          enabled: true
          image:
            repository: rancher/pushprox-proxy
            tag: v0.1.0-rancher1-proxy
          nodeSelector: {}
          port: 8080
          resources: {}
          tolerations: null
        serviceMonitor:
          enabled: true
      rkeProxy:
        clients:
          command:
          - pushprox-client
          copyCertsImage:
            repository: rancher/library-busybox
            tag: 1.31.1
          enabled: true
          https:
            caCertFile: ""
            certDir: ""
            certFile: ""
            enabled: false
            insecureSkipVerify: false
            keyFile: ""
            useServiceAccountCredentials: false
          image:
            repository: rancher/pushprox-client
            tag: v0.1.0-rancher1-client
          nodeSelector: {}
          port: 10013
          proxyUrl: ""
          resources: {}
          tolerations:
          - effect: NoExecute
            operator: Exists
          - effect: NoSchedule
            operator: Exists
          useLocalhost: true
        component: kube-proxy
        enabled: false
        global:
          cattle:
            clusterId: local
            clusterName: local
            systemDefaultRegistry: ""
          imagePullSecrets: null
          kubectl:
            pullPolicy: IfNotPresent
            repository: rancher/kubectl
            tag: v1.18.6
          rbac:
            create: true
            pspAnnotations: {}
            pspEnabled: true
            userRoles:
              aggregateToDefaultRoles: true
              create: true
          systemDefaultRegistry: ""
        metricsPort: 10249
        proxy:
          command:
          - pushprox-proxy
          enabled: true
          image:
            repository: rancher/pushprox-proxy
            tag: v0.1.0-rancher1-proxy
          nodeSelector: {}
          port: 8080
          resources: {}
          tolerations: null
        serviceMonitor:
          enabled: true
      rkeScheduler:
        clients:
          command:
          - pushprox-client
          copyCertsImage:
            repository: rancher/library-busybox
            tag: 1.31.1
          enabled: true
          https:
            caCertFile: ""
            certDir: ""
            certFile: ""
            enabled: false
            insecureSkipVerify: false
            keyFile: ""
            useServiceAccountCredentials: false
          image:
            repository: rancher/pushprox-client
            tag: v0.1.0-rancher1-client
          nodeSelector:
            node-role.kubernetes.io/controlplane: "true"
          port: 10012
          proxyUrl: ""
          resources: {}
          tolerations:
          - effect: NoExecute
            operator: Exists
          - effect: NoSchedule
            operator: Exists
          useLocalhost: true
        component: kube-scheduler
        enabled: false
        global:
          cattle:
            clusterId: local
            clusterName: local
            systemDefaultRegistry: ""
          imagePullSecrets: null
          kubectl:
            pullPolicy: IfNotPresent
            repository: rancher/kubectl
            tag: v1.18.6
          rbac:
            create: true
            pspAnnotations: {}
            pspEnabled: true
            userRoles:
              aggregateToDefaultRoles: true
              create: true
          systemDefaultRegistry: ""
        metricsPort: 10251
        proxy:
          command:
          - pushprox-proxy
          enabled: true
          image:
            repository: rancher/pushprox-proxy
            tag: v0.1.0-rancher1-proxy
          nodeSelector: {}
          port: 8080
          resources: {}
          tolerations: null
        serviceMonitor:
          enabled: true
  helmVersion: 3
  info:
    description: Install complete
    firstDeployed: "2020-11-26T22:17:31Z"
    lastDeployed: "2020-11-26T22:17:31Z"
    notes: |
      rancher-monitoring has been installed. Check its status by running:
        kubectl --namespace cattle-monitoring-system get pods -l "release=rancher-monitoring"

      Visit https://github.com/prometheus-operator/kube-prometheus for instructions on how to create & configure Alertmanager and Prometheus instances using the Operator.
    readme: |
      # kube-prometheus-stack

      Installs the [kube-prometheus stack](https://github.com/prometheus-operator/kube-prometheus), a collection of Kubernetes manifests, [Grafana](http://grafana.com/) dashboards, and [Prometheus rules](https://prometheus.io/docs/prometheus/latest/configuration/recording_rules/) combined with documentation and scripts to provide easy to operate end-to-end Kubernetes cluster monitoring with [Prometheus](https://prometheus.io/) using the [Prometheus Operator](https://github.com/prometheus-operator/prometheus-operator).

      See the [kube-prometheus](https://github.com/prometheus-operator/kube-prometheus) README for details about components, dashboards, and alerts.

      _Note: This chart was formerly named `prometheus-operator` chart, now renamed to more clearly reflect that it installs the `kube-prometheus` project stack, within which Prometheus Operator is only one component._

      ## Prerequisites

      - Kubernetes 1.10+ with Beta APIs
      - Helm 2.12+ (If using Helm < 2.14, [see below for CRD workaround](#Helm-fails-to-create-CRDs))

      ## Get Repo Info

      ```console
      helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
      helm repo add stable https://kubernetes-charts.storage.googleapis.com/
      helm repo update
      ```

      _See [helm repo](https://helm.sh/docs/helm/helm_repo/) for command documentation._

      ## Install Chart

      ```console
      # Helm 3
      $ helm install [RELEASE_NAME] prometheus-community/kube-prometheus-stack

      # Helm 2
      $ helm install --name [RELEASE_NAME] prometheus-community/kube-prometheus-stack
      ```

      _See [configuration](#configuration) below._

      _See [helm install](https://helm.sh/docs/helm/helm_install/) for command documentation._

      ## Dependencies

      By default this chart installs additional, dependent charts:

      - [stable/kube-state-metrics](https://github.com/helm/charts/tree/master/stable/kube-state-metrics)
      - [stable/prometheus-node-exporter](https://github.com/prometheus-community/helm-charts/tree/main/prometheus-node-exporter)
      - [grafana/grafana](https://github.com/grafana/helm-charts/tree/main/charts/grafana)

      To disable dependencies during installation, see [multiple releases](#multiple-releases) below.

      _See [helm dependency](https://helm.sh/docs/helm/helm_dependency/) for command documentation._

      ## Uninstall Chart

      ```console
      # Helm 3
      $ helm uninstall [RELEASE_NAME]

      # Helm 2
      # helm delete --purge [RELEASE_NAME]
      ```

      This removes all the Kubernetes components associated with the chart and deletes the release.

      _See [helm uninstall](https://helm.sh/docs/helm/helm_uninstall/) for command documentation._

      CRDs created by this chart are not removed by default and should be manually cleaned up:

      ```console
      kubectl delete crd prometheuses.monitoring.coreos.com
      kubectl delete crd prometheusrules.monitoring.coreos.com
      kubectl delete crd servicemonitors.monitoring.coreos.com
      kubectl delete crd podmonitors.monitoring.coreos.com
      kubectl delete crd alertmanagers.monitoring.coreos.com
      kubectl delete crd thanosrulers.monitoring.coreos.com
      ```

      ## Upgrading Chart

      ```console
      # Helm 3 or 2
      $ helm upgrade [RELEASE_NAME] prometheus-community/kube-prometheus-stack
      ```

      _See [helm upgrade](https://helm.sh/docs/helm/helm_upgrade/) for command documentation._

      ### Upgrading an existing Release to a new major version

      A major chart version change (like v1.2.3 -> v2.0.0) indicates that there is an incompatible breaking change needing manual actions.

      ### From 8.x to 9.x

      Version 9 of the helm chart removes the existing `additionalScrapeConfigsExternal` in favour of `additionalScrapeConfigsSecret`. This change lets users specify the secret name and secret key to use for the additional scrape configuration of prometheus. This is useful for users that have prometheus-operator as a subchart and also have a template that creates the additional scrape configuration.

      ### From 7.x to 8.x

      Due to new template functions being used in the rules in version 8.x.x of the chart, an upgrade to Prometheus Operator and Prometheus is necessary in order to support them. First, upgrade to the latest version of 7.x.x

      ```sh
      helm upgrade [RELEASE_NAME] prometheus-community/kube-prometheus-stack --version 7.5.0
      ```

      Then upgrade to 8.x.x

      ```sh
      helm upgrade [RELEASE_NAME] prometheus-community/kube-prometheus-stack --version [8.x.x]
      ```

      Minimal recommended Prometheus version for this chart release is `2.12.x`

      ### From 6.x to 7.x

      Due to a change in grafana subchart, version 7.x.x now requires Helm >= 2.12.0.

      ### From 5.x to 6.x

      Due to a change in deployment labels of kube-state-metrics, the upgrade requires `helm upgrade --force` in order to re-create the deployment. If this is not done an error will occur indicating that the deployment cannot be modified:

      ```console
      invalid: spec.selector: Invalid value: v1.LabelSelector{MatchLabels:map[string]string{"app.kubernetes.io/name":"kube-state-metrics"}, MatchExpressions:[]v1.LabelSelectorRequirement(nil)}: field is immutable
      ```

      If this error has already been encountered, a `helm history` command can be used to determine which release has worked, then `helm rollback` to the release, then `helm upgrade --force` to this new one

      ## Configuration

      See [Customizing the Chart Before Installing](https://helm.sh/docs/intro/using_helm/#customizing-the-chart-before-installing). To see all configurable options with detailed comments:

      ```console
      helm show values prometheus-community/kube-prometheus-stack
      ```

      You may also run `helm show values` on this chart's [dependencies](#dependencies) for additional options.

      ### Rancher Monitoring Configuration

      The following table shows values exposed by Rancher Monitoring's additions to the chart:

      | Parameter | Description | Default |
      | ----- | ----------- | ------ |
      | `nameOverride` | Provide a name that should be used instead of the chart name when naming all resources deployed by this chart |`"rancher-monitoring"`|
      | `namespaceOverride` | Override the deployment namespace | `"cattle-monitoring-system"` |
      | `global.rbac.userRoles.create` | Create default user ClusterRoles to allow users to interact with Prometheus CRs, ConfigMaps, and Secrets | `true` |
      | `global.rbac.userRoles.aggregateToDefaultRoles` | Aggregate default user ClusterRoles into default k8s ClusterRoles | `true` |
      | `prometheus-adapter.enabled` | Whether to install [prometheus-adapter](https://github.com/helm/charts/tree/master/stable/prometheus-adapter) within the cluster | `true` |
      | `prometheus-adapter.prometheus.url` | A URL pointing to the Prometheus deployment within your cluster. The default value is set based on the assumption that you plan to deploy the default Prometheus instance from this chart where `.Values.namespaceOverride=cattle-monitoring-system` and `.Values.nameOverride=rancher-monitoring` | `http://rancher-monitoring-prometheus.cattle-monitoring-system.svc` |
      | `prometheus-adapter.prometheus.port` | The port on the Prometheus deployment that Prometheus Adapter can make requests to | `9090` |
      | `prometheus.prometheusSpec.ignoreNamespaceSelectors` | Ignore NamespaceSelector settings from the PodMonitor and ServiceMonitor configs. If true, PodMonitors and ServiceMonitors can only discover Pods and Services within the namespace they are deployed into | `false` |
      | `alertmanager.secret.cleanupOnUninstall` | Whether or not to trigger a job to clean up the alertmanager config secret to be deleted on a `helm uninstall`. By default, this is disabled to prevent the loss of alerting configuration on an uninstall. | `false` |
      | `alertmanager.secret.image.pullPolicy` | Image pull policy for job(s) related to alertmanager config secret's lifecycle | `IfNotPresent` |
      | `alertmanager.secret.image.repository` | Repository to use for job(s) related to alertmanager config secret's lifecycle | `rancher/rancher-agent` |
      | `alertmanager.secret.image.tag` | Tag to use for job(s) related to alertmanager config secret's lifecycle | `v2.4.8` |

      The following values are enabled for different distributions via [rancher-pushprox](https://github.com/rancher/dev-charts/tree/master/packages/rancher-pushprox). See the rancher-pushprox `README.md` for more information on what all values can be configured for the PushProxy chart.

      | Parameter | Description | Default |
      | ----- | ----------- | ------ |
      | `rkeControllerManager.enabled` | Create a PushProx installation for monitoring kube-controller-manager metrics in RKE clusters | `false` |
      | `rkeScheduler.enabled` | Create a PushProx installation for monitoring kube-scheduler metrics in RKE clusters | `false` |
      | `rkeProxy.enabled` | Create a PushProx installation for monitoring kube-proxy metrics in RKE clusters | `false` |
      | `rkeEtcd.enabled` | Create a PushProx installation for monitoring etcd metrics in RKE clusters | `false` |
      | `k3sServer.enabled` | Create a PushProx installation for monitoring k3s-server metrics (accounts for kube-controller-manager, kube-scheduler, and kube-proxy metrics) in k3s clusters | `false` |
      | `kubeAdmControllerManager.enabled` | Create a PushProx installation for monitoring kube-controller-manager metrics in kubeAdm clusters | `false` |
      | `kubeAdmScheduler.enabled` | Create a PushProx installation for monitoring kube-scheduler metrics in kubeAdm clusters | `false` |
      | `kubeAdmProxy.enabled` | Create a PushProx installation for monitoring kube-proxy metrics in kubeAdm clusters | `false` |
      | `kubeAdmEtcd.enabled` | Create a PushProx installation for monitoring etcd metrics in kubeAdm clusters | `false` |


      ### Multiple releases

      The same chart can be used to run multiple Prometheus instances in the same cluster if required. To achieve this, it is necessary to run only one instance of prometheus-operator and a pair of alertmanager pods for an HA configuration, while all other components need to be disabled. To disable a dependency during installation, set `kubeStateMetrics.enabled`, `nodeExporter.enabled` and `grafana.enabled` to `false`.

      ## Work-Arounds for Known Issues

      ### Running on private GKE clusters

      When Google configure the control plane for private clusters, they automatically configure VPC peering between your Kubernetes cluster’s network and a separate Google managed project. In order to restrict what Google are able to access within your cluster, the firewall rules configured restrict access to your Kubernetes pods. This means that in order to use the webhook component with a GKE private cluster, you must configure an additional firewall rule to allow the GKE control plane access to your webhook pod.

      You can read more information on how to add firewall rules for the GKE control plane nodes in the [GKE docs](https://cloud.google.com/kubernetes-engine/docs/how-to/private-clusters#add_firewall_rules)

      Alternatively, you can disable the hooks by setting `prometheusOperator.admissionWebhooks.enabled=false`.

      ### Helm fails to create CRDs

      You should upgrade to Helm 2.14 + in order to avoid this issue. However, if you are stuck with an earlier Helm release you should instead use the following approach: Due to a bug in helm, it is possible for the 5 CRDs that are created by this chart to fail to get fully deployed before Helm attempts to create resources that require them. This affects all versions of Helm with a [potential fix pending](https://github.com/helm/helm/pull/5112). In order to work around this issue when installing the chart you will need to make sure all 5 CRDs exist in the cluster first and disable their previsioning by the chart:

      1. Create CRDs

          ```console
          kubectl apply -f https://raw.githubusercontent.com/prometheus-operator/prometheus-operator/release-0.38/example/prometheus-operator-crd/monitoring.coreos.com_alertmanagers.yaml
          kubectl apply -f https://raw.githubusercontent.com/prometheus-operator/prometheus-operator/release-0.38/example/prometheus-operator-crd/monitoring.coreos.com_podmonitors.yaml
          kubectl apply -f https://raw.githubusercontent.com/prometheus-operator/prometheus-operator/release-0.38/example/prometheus-operator-crd/monitoring.coreos.com_prometheuses.yaml
          kubectl apply -f https://raw.githubusercontent.com/prometheus-operator/prometheus-operator/release-0.38/example/prometheus-operator-crd/monitoring.coreos.com_prometheusrules.yaml
          kubectl apply -f https://raw.githubusercontent.com/prometheus-operator/prometheus-operator/release-0.38/example/prometheus-operator-crd/monitoring.coreos.com_servicemonitors.yaml
          kubectl apply -f https://raw.githubusercontent.com/prometheus-operator/prometheus-operator/release-0.38/example/prometheus-operator-crd/monitoring.coreos.com_thanosrulers.yaml
          ```

      2. Wait for CRDs to be created, which should only take a few seconds
      3. [Install](#install-chart) the chart, but disable the CRD provisioning by setting `prometheusOperator.createCustomResource` to `false`

      ## PrometheusRules Admission Webhooks

      With Prometheus Operator version 0.30+, the core Prometheus Operator pod exposes an endpoint that will integrate with the `validatingwebhookconfiguration` Kubernetes feature to prevent malformed rules from being added to the cluster.

      ### How the Chart Configures the Hooks

      A validating and mutating webhook configuration requires the endpoint to which the request is sent to use TLS. It is possible to set up custom certificates to do this, but in most cases, a self-signed certificate is enough. The setup of this component requires some more complex orchestration when using helm. The steps are created to be idempotent and to allow turning the feature on and off without running into helm quirks.

      1. A pre-install hook provisions a certificate into the same namespace using a format compatible with provisioning using end-user certificates. If the certificate already exists, the hook exits.
      2. The prometheus operator pod is configured to use a TLS proxy container, which will load that certificate.
      3. Validating and Mutating webhook configurations are created in the cluster, with their failure mode set to Ignore. This allows rules to be created by the same chart at the same time, even though the webhook has not yet been fully set up - it does not have the correct CA field set.
      4. A post-install hook reads the CA from the secret created by step 1 and patches the Validating and Mutating webhook configurations. This process will allow a custom CA provisioned by some other process to also be patched into the webhook configurations. The chosen failure policy is also patched into the webhook configurations

      ### Alternatives

      It should be possible to use [jetstack/cert-manager](https://github.com/jetstack/cert-manager) if a more complete solution is required, but it has not been tested.

      ### Limitations

      Because the operator can only run as a single pod, there is potential for this component failure to cause rule deployment failure. Because this risk is outweighed by the benefit of having validation, the feature is enabled by default.

      ## Developing Prometheus Rules and Grafana Dashboards

      This chart Grafana Dashboards and Prometheus Rules are just a copy from [prometheus-operator/prometheus-operator](https://github.com/prometheus-operator/prometheus-operator) and other sources, synced (with alterations) by scripts in [hack](hack) folder. In order to introduce any changes you need to first [add them to the original repo](https://github.com/prometheus-operator/kube-prometheus/blob/master/docs/developing-prometheus-rules-and-grafana-dashboards.md) and then sync there by scripts.

      ## Further Information

      For more in-depth documentation of configuration options meanings, please see

      - [Prometheus Operator](https://github.com/prometheus-operator/prometheus-operator)
      - [Prometheus](https://prometheus.io/docs/introduction/overview/)
      - [Grafana](https://github.com/grafana/helm-charts/tree/main/charts/grafana#grafana-helm-chart)

      ## prometheus.io/scrape

      The prometheus operator does not support annotation-based discovery of services, using the `serviceMonitor` CRD in its place as it provides far more configuration options. For information on how to use servicemonitors, please see the documentation on the `prometheus-operator/prometheus-operator` documentation here: [Running Exporters](https://github.com/prometheus-operator/prometheus-operator/blob/master/Documentation/user-guides/running-exporters.md)

      By default, Prometheus discovers ServiceMonitors within its namespace, that are labeled with the same release tag as the prometheus-operator release. Sometimes, you may need to discover custom ServiceMonitors, for example used to scrape data from third-party applications. An easy way of doing this, without compromising the default ServiceMonitors discovery, is allowing Prometheus to discover all ServiceMonitors within its namespace, without applying label filtering. To do so, you can set `prometheus.prometheusSpec.serviceMonitorSelectorNilUsesHelmValues` to `false`.

      ## Migrating from coreos/prometheus-operator chart

      The multiple charts have been combined into a single chart that installs prometheus operator, prometheus, alertmanager, grafana as well as the multitude of exporters necessary to monitor a cluster.

      There is no simple and direct migration path between the charts as the changes are extensive and intended to make the chart easier to support.

      The capabilities of the old chart are all available in the new chart, including the ability to run multiple prometheus instances on a single cluster - you will need to disable the parts of the chart you do not wish to deploy.

      You can check out the tickets for this change [here](https://github.com/prometheus-operator/prometheus-operator/issues/592) and [here](https://github.com/helm/charts/pull/6765).

      ### High-level overview of Changes

      #### Added dependencies

      The chart has added 3 [dependencies](#dependencies).

      - Node-Exporter, Kube-State-Metrics: These components are loaded as dependencies into the chart, and are relatively simple components
      - Grafana: The Grafana chart is more feature-rich than this chart - it contains a sidecar that is able to load data sources and dashboards from configmaps deployed into the same cluster. For more information check out the [documentation for the chart](https://github.com/helm/charts/tree/master/stable/grafana)

      #### CoreOS CRDs

      The CRDs are provisioned using a separate chart installation within the Helm chart `rancher-monitoring-crd` that is packaged alongside this chart.

      #### Kubelet Service

      Because the kubelet service has a new name in the chart, make sure to clean up the old kubelet service in the `kube-system` namespace to prevent counting container metrics twice.

      #### Persistent Volumes

      If you would like to keep the data of the current persistent volumes, it should be possible to attach existing volumes to new PVCs and PVs that are created using the conventions in the new chart. For example, in order to use an existing Azure disk for a helm release called `prometheus-migration` the following resources can be created:

      ```yaml
      apiVersion: v1
      kind: PersistentVolume
      metadata:
        name: pvc-prometheus-migration-prometheus-0
      spec:
        accessModes:
        - ReadWriteOnce
        azureDisk:
          cachingMode: None
          diskName: pvc-prometheus-migration-prometheus-0
          diskURI: /subscriptions/f5125d82-2622-4c50-8d25-3f7ba3e9ac4b/resourceGroups/sample-migration-resource-group/providers/Microsoft.Compute/disks/pvc-prometheus-migration-prometheus-0
          fsType: ""
          kind: Managed
          readOnly: false
        capacity:
          storage: 1Gi
        persistentVolumeReclaimPolicy: Delete
        storageClassName: prometheus
        volumeMode: Filesystem
      ```

      ```yaml
      apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        labels:
          app: prometheus
          prometheus: prometheus-migration-prometheus
        name: prometheus-prometheus-migration-prometheus-db-prometheus-prometheus-migration-prometheus-0
        namespace: monitoring
      spec:
        accessModes:
        - ReadWriteOnce
        dataSource: null
        resources:
          requests:
            storage: 1Gi
        storageClassName: prometheus
        volumeMode: Filesystem
        volumeName: pvc-prometheus-migration-prometheus-0
      status:
        accessModes:
        - ReadWriteOnce
        capacity:
          storage: 1Gi
      ```

      The PVC will take ownership of the PV and when you create a release using a persistent volume claim template it will use the existing PVCs as they match the naming convention used by the chart. For other cloud providers similar approaches can be used.

      #### KubeProxy

      The metrics bind address of kube-proxy is default to `127.0.0.1:10249` that prometheus instances **cannot** access to. You should expose metrics by changing `metricsBindAddress` field value to `0.0.0.0:10249` if you want to collect them.

      Depending on the cluster, the relevant part `config.conf` will be in ConfigMap `kube-system/kube-proxy` or `kube-system/kube-proxy-config`. For example:

      ```console
      kubectl -n kube-system edit cm kube-proxy
      ```

      ```yaml
      apiVersion: v1
      data:
        config.conf: |-
          apiVersion: kubeproxy.config.k8s.io/v1alpha1
          kind: KubeProxyConfiguration
          # ...
          # metricsBindAddress: 127.0.0.1:10249
          metricsBindAddress: 0.0.0.0:10249
          # ...
        kubeconfig.conf: |-
          # ...
      kind: ConfigMap
      metadata:
        labels:
          app: kube-proxy
        name: kube-proxy
        namespace: kube-system
      ```
    status: deployed
  name: rancher-monitoring
  namespace: cattle-monitoring-system
  resources:
  - apiVersion: v1
    kind: Namespace
    name: cattle-dashboards
  - apiVersion: networking.k8s.io/v1
    kind: NetworkPolicy
    name: default-allow-all
    namespace: cattle-monitoring-system
  - apiVersion: networking.k8s.io/v1
    kind: NetworkPolicy
    name: default-allow-all
    namespace: cattle-dashboards
  - apiVersion: policy/v1beta1
    kind: PodSecurityPolicy
    name: rancher-monitoring-grafana
    namespace: cattle-monitoring-system
  - apiVersion: policy/v1beta1
    kind: PodSecurityPolicy
    name: rancher-monitoring-grafana-test
    namespace: cattle-monitoring-system
  - apiVersion: policy/v1beta1
    kind: PodSecurityPolicy
    name: rancher-monitoring-kube-state-metrics
  - apiVersion: policy/v1beta1
    kind: PodSecurityPolicy
    name: rancher-monitoring-prometheus-node-exporter
    namespace: cattle-monitoring-system
  - apiVersion: policy/v1beta1
    kind: PodSecurityPolicy
    name: rancher-monitoring-alertmanager
  - apiVersion: policy/v1beta1
    kind: PodSecurityPolicy
    name: rancher-monitoring-operator
  - apiVersion: policy/v1beta1
    kind: PodSecurityPolicy
    name: rancher-monitoring-prometheus
  - apiVersion: v1
    kind: ServiceAccount
    name: rancher-monitoring-grafana
    namespace: cattle-monitoring-system
  - apiVersion: v1
    kind: ServiceAccount
    name: rancher-monitoring-grafana-test
    namespace: cattle-monitoring-system
  - apiVersion: v1
    kind: ServiceAccount
    name: rancher-monitoring-kube-state-metrics
    namespace: cattle-monitoring-system
  - apiVersion: v1
    kind: ServiceAccount
    name: rancher-monitoring-prometheus-adapter
    namespace: cattle-monitoring-system
  - apiVersion: v1
    kind: ServiceAccount
    name: rancher-monitoring-prometheus-node-exporter
    namespace: cattle-monitoring-system
  - apiVersion: v1
    kind: ServiceAccount
    name: rancher-monitoring-alertmanager
    namespace: cattle-monitoring-system
  - apiVersion: v1
    kind: ServiceAccount
    name: rancher-monitoring-operator
    namespace: cattle-monitoring-system
  - apiVersion: v1
    kind: ServiceAccount
    name: rancher-monitoring-prometheus
    namespace: cattle-monitoring-system
  - apiVersion: v1
    kind: ServiceAccount
    name: rancher-monitoring-patch-sa
    namespace: cattle-monitoring-system
  - apiVersion: v1
    kind: Secret
    name: rancher-monitoring-grafana
    namespace: cattle-monitoring-system
  - apiVersion: v1
    kind: ConfigMap
    name: rancher-monitoring-grafana-config-dashboards
    namespace: cattle-monitoring-system
  - apiVersion: v1
    kind: ConfigMap
    name: rancher-monitoring-grafana
    namespace: cattle-monitoring-system
  - apiVersion: v1
    kind: ConfigMap
    name: grafana-nginx-proxy-config
    namespace: cattle-monitoring-system
  - apiVersion: v1
    kind: ConfigMap
    name: rancher-monitoring-grafana-test
    namespace: cattle-monitoring-system
  - apiVersion: v1
    kind: ConfigMap
    name: rancher-monitoring-prometheus-adapter
    namespace: cattle-monitoring-system
  - apiVersion: v1
    kind: ConfigMap
    name: rancher-monitoring-grafana-datasource
    namespace: cattle-monitoring-system
  - apiVersion: v1
    kind: ConfigMap
    name: rancher-monitoring-apiserver
    namespace: cattle-dashboards
  - apiVersion: v1
    kind: ConfigMap
    name: rancher-monitoring-cluster-total
    namespace: cattle-dashboards
  - apiVersion: v1
    kind: ConfigMap
    name: rancher-monitoring-k8s-coredns
    namespace: cattle-dashboards
  - apiVersion: v1
    kind: ConfigMap
    name: rancher-monitoring-k8s-resources-cluster
    namespace: cattle-dashboards
  - apiVersion: v1
    kind: ConfigMap
    name: rancher-monitoring-k8s-resources-namespace
    namespace: cattle-dashboards
  - apiVersion: v1
    kind: ConfigMap
    name: rancher-monitoring-k8s-resources-node
    namespace: cattle-dashboards
  - apiVersion: v1
    kind: ConfigMap
    name: rancher-monitoring-k8s-resources-pod
    namespace: cattle-dashboards
  - apiVersion: v1
    kind: ConfigMap
    name: rancher-monitoring-k8s-resources-workload
    namespace: cattle-dashboards
  - apiVersion: v1
    kind: ConfigMap
    name: rancher-monitoring-k8s-resources-workloads-namespace
    namespace: cattle-dashboards
  - apiVersion: v1
    kind: ConfigMap
    name: rancher-monitoring-kubelet
    namespace: cattle-dashboards
  - apiVersion: v1
    kind: ConfigMap
    name: rancher-monitoring-namespace-by-pod
    namespace: cattle-dashboards
  - apiVersion: v1
    kind: ConfigMap
    name: rancher-monitoring-namespace-by-workload
    namespace: cattle-dashboards
  - apiVersion: v1
    kind: ConfigMap
    name: rancher-monitoring-node-cluster-rsrc-use
    namespace: cattle-dashboards
  - apiVersion: v1
    kind: ConfigMap
    name: rancher-monitoring-node-rsrc-use
    namespace: cattle-dashboards
  - apiVersion: v1
    kind: ConfigMap
    name: rancher-monitoring-nodes
    namespace: cattle-dashboards
  - apiVersion: v1
    kind: ConfigMap
    name: rancher-monitoring-persistentvolumesusage
    namespace: cattle-dashboards
  - apiVersion: v1
    kind: ConfigMap
    name: rancher-monitoring-pod-total
    namespace: cattle-dashboards
  - apiVersion: v1
    kind: ConfigMap
    name: rancher-monitoring-prometheus
    namespace: cattle-dashboards
  - apiVersion: v1
    kind: ConfigMap
    name: rancher-monitoring-statefulset
    namespace: cattle-dashboards
  - apiVersion: v1
    kind: ConfigMap
    name: rancher-monitoring-workload-total
    namespace: cattle-dashboards
  - apiVersion: v1
    kind: ConfigMap
    name: prometheus-nginx-proxy-config
    namespace: cattle-monitoring-system
  - apiVersion: v1
    kind: ConfigMap
    name: rancher-monitoring-home
    namespace: cattle-dashboards
  - apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRole
    name: rancher-monitoring-grafana-clusterrole
  - apiVersion: rbac.authorization.k8s.io/v1beta1
    kind: ClusterRole
    name: rancher-monitoring-kube-state-metrics
  - apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRole
    name: psp-rancher-monitoring-kube-state-metrics
  - apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRole
    name: prometheus-adapter-server-resources
  - apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRole
    name: prometheus-adapter-resource-reader
  - apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRole
    name: psp-rancher-monitoring-prometheus-node-exporter
  - apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRole
    name: rancher-monitoring-operator
  - apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRole
    name: rancher-monitoring-operator-psp
  - apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRole
    name: rancher-monitoring-prometheus
  - apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRole
    name: rancher-monitoring-prometheus-psp
  - apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRole
    name: monitoring-admin
  - apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRole
    name: monitoring-edit
  - apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRole
    name: monitoring-view
  - apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRole
    name: rancher-monitoring-patch-sa
  - apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRoleBinding
    name: rancher-monitoring-grafana-clusterrolebinding
  - apiVersion: rbac.authorization.k8s.io/v1beta1
    kind: ClusterRoleBinding
    name: rancher-monitoring-kube-state-metrics
  - apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRoleBinding
    name: psp-rancher-monitoring-kube-state-metrics
  - apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRoleBinding
    name: prometheus-adapter:system:auth-delegator
  - apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRoleBinding
    name: prometheus-adapter-resource-reader
  - apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRoleBinding
    name: prometheus-adapter-hpa-controller
  - apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRoleBinding
    name: psp-rancher-monitoring-prometheus-node-exporter
  - apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRoleBinding
    name: rancher-monitoring-operator
  - apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRoleBinding
    name: rancher-monitoring-operator-psp
  - apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRoleBinding
    name: rancher-monitoring-prometheus
  - apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRoleBinding
    name: rancher-monitoring-prometheus-psp
  - apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRoleBinding
    name: rancher-monitoring-patch-sa
  - apiVersion: rbac.authorization.k8s.io/v1beta1
    kind: Role
    name: rancher-monitoring-grafana
    namespace: cattle-monitoring-system
  - apiVersion: rbac.authorization.k8s.io/v1
    kind: Role
    name: rancher-monitoring-grafana-test
    namespace: cattle-monitoring-system
  - apiVersion: rbac.authorization.k8s.io/v1
    kind: Role
    name: rancher-monitoring-alertmanager
    namespace: cattle-monitoring-system
  - apiVersion: rbac.authorization.k8s.io/v1
    kind: Role
    name: monitoring-config-admin
    namespace: cattle-monitoring-system
  - apiVersion: rbac.authorization.k8s.io/v1
    kind: Role
    name: monitoring-config-edit
    namespace: cattle-monitoring-system
  - apiVersion: rbac.authorization.k8s.io/v1
    kind: Role
    name: monitoring-config-view
    namespace: cattle-monitoring-system
  - apiVersion: rbac.authorization.k8s.io/v1
    kind: Role
    name: monitoring-dashboard-admin
    namespace: cattle-dashboards
  - apiVersion: rbac.authorization.k8s.io/v1
    kind: Role
    name: monitoring-dashboard-edit
    namespace: cattle-dashboards
  - apiVersion: rbac.authorization.k8s.io/v1
    kind: Role
    name: monitoring-dashboard-view
    namespace: cattle-dashboards
  - apiVersion: rbac.authorization.k8s.io/v1beta1
    kind: RoleBinding
    name: rancher-monitoring-grafana
    namespace: cattle-monitoring-system
  - apiVersion: rbac.authorization.k8s.io/v1
    kind: RoleBinding
    name: rancher-monitoring-grafana-test
    namespace: cattle-monitoring-system
  - apiVersion: rbac.authorization.k8s.io/v1
    kind: RoleBinding
    name: prometheus-adapter-auth-reader
    namespace: cattle-monitoring-system
  - apiVersion: rbac.authorization.k8s.io/v1
    kind: RoleBinding
    name: rancher-monitoring-alertmanager
    namespace: cattle-monitoring-system
  - apiVersion: v1
    kind: Service
    name: rancher-monitoring-grafana
    namespace: cattle-monitoring-system
  - apiVersion: v1
    kind: Service
    name: rancher-monitoring-kube-state-metrics
    namespace: cattle-monitoring-system
  - apiVersion: v1
    kind: Service
    name: rancher-monitoring-prometheus-adapter
    namespace: cattle-monitoring-system
  - apiVersion: v1
    kind: Service
    name: rancher-monitoring-prometheus-node-exporter
    namespace: cattle-monitoring-system
  - apiVersion: v1
    kind: Service
    name: rancher-monitoring-alertmanager
    namespace: cattle-monitoring-system
  - apiVersion: v1
    kind: Service
    name: rancher-monitoring-coredns
    namespace: kube-system
  - apiVersion: v1
    kind: Service
    name: rancher-monitoring-operator
    namespace: cattle-monitoring-system
  - apiVersion: v1
    kind: Service
    name: rancher-monitoring-prometheus
    namespace: cattle-monitoring-system
  - apiVersion: apps/v1
    kind: DaemonSet
    name: rancher-monitoring-prometheus-node-exporter
    namespace: cattle-monitoring-system
  - apiVersion: apps/v1
    kind: Deployment
    name: rancher-monitoring-grafana
    namespace: cattle-monitoring-system
  - apiVersion: apps/v1
    kind: Deployment
    name: rancher-monitoring-kube-state-metrics
    namespace: cattle-monitoring-system
  - apiVersion: apps/v1
    kind: Deployment
    name: rancher-monitoring-prometheus-adapter
    namespace: cattle-monitoring-system
  - apiVersion: apps/v1
    kind: Deployment
    name: rancher-monitoring-operator
    namespace: cattle-monitoring-system
  - apiVersion: apiregistration.k8s.io/v1beta1
    kind: APIService
    name: v1beta1.custom.metrics.k8s.io
  - apiVersion: monitoring.coreos.com/v1
    kind: Alertmanager
    name: rancher-monitoring-alertmanager
    namespace: cattle-monitoring-system
  - apiVersion: admissionregistration.k8s.io/v1beta1
    kind: MutatingWebhookConfiguration
    name: rancher-monitoring-admission
  - apiVersion: monitoring.coreos.com/v1
    kind: Prometheus
    name: rancher-monitoring-prometheus
    namespace: cattle-monitoring-system
  - apiVersion: monitoring.coreos.com/v1
    kind: PrometheusRule
    name: rancher-monitoring-alertmanager.rules
    namespace: cattle-monitoring-system
  - apiVersion: monitoring.coreos.com/v1
    kind: PrometheusRule
    name: rancher-monitoring-general.rules
    namespace: cattle-monitoring-system
  - apiVersion: monitoring.coreos.com/v1
    kind: PrometheusRule
    name: rancher-monitoring-k8s.rules
    namespace: cattle-monitoring-system
  - apiVersion: monitoring.coreos.com/v1
    kind: PrometheusRule
    name: rancher-monitoring-kube-apiserver-availability.rules
    namespace: cattle-monitoring-system
  - apiVersion: monitoring.coreos.com/v1
    kind: PrometheusRule
    name: rancher-monitoring-kube-apiserver-slos
    namespace: cattle-monitoring-system
  - apiVersion: monitoring.coreos.com/v1
    kind: PrometheusRule
    name: rancher-monitoring-kube-apiserver.rules
    namespace: cattle-monitoring-system
  - apiVersion: monitoring.coreos.com/v1
    kind: PrometheusRule
    name: rancher-monitoring-kube-prometheus-general.rules
    namespace: cattle-monitoring-system
  - apiVersion: monitoring.coreos.com/v1
    kind: PrometheusRule
    name: rancher-monitoring-kube-prometheus-node-recording.rules
    namespace: cattle-monitoring-system
  - apiVersion: monitoring.coreos.com/v1
    kind: PrometheusRule
    name: rancher-monitoring-kube-state-metrics
    namespace: cattle-monitoring-system
  - apiVersion: monitoring.coreos.com/v1
    kind: PrometheusRule
    name: rancher-monitoring-kubelet.rules
    namespace: cattle-monitoring-system
  - apiVersion: monitoring.coreos.com/v1
    kind: PrometheusRule
    name: rancher-monitoring-kubernetes-apps
    namespace: cattle-monitoring-system
  - apiVersion: monitoring.coreos.com/v1
    kind: PrometheusRule
    name: rancher-monitoring-kubernetes-resources
    namespace: cattle-monitoring-system
  - apiVersion: monitoring.coreos.com/v1
    kind: PrometheusRule
    name: rancher-monitoring-kubernetes-storage
    namespace: cattle-monitoring-system
  - apiVersion: monitoring.coreos.com/v1
    kind: PrometheusRule
    name: rancher-monitoring-kubernetes-system-apiserver
    namespace: cattle-monitoring-system
  - apiVersion: monitoring.coreos.com/v1
    kind: PrometheusRule
    name: rancher-monitoring-kubernetes-system-kubelet
    namespace: cattle-monitoring-system
  - apiVersion: monitoring.coreos.com/v1
    kind: PrometheusRule
    name: rancher-monitoring-kubernetes-system
    namespace: cattle-monitoring-system
  - apiVersion: monitoring.coreos.com/v1
    kind: PrometheusRule
    name: rancher-monitoring-node-exporter.rules
    namespace: cattle-monitoring-system
  - apiVersion: monitoring.coreos.com/v1
    kind: PrometheusRule
    name: rancher-monitoring-node-exporter
    namespace: cattle-monitoring-system
  - apiVersion: monitoring.coreos.com/v1
    kind: PrometheusRule
    name: rancher-monitoring-node-network
    namespace: cattle-monitoring-system
  - apiVersion: monitoring.coreos.com/v1
    kind: PrometheusRule
    name: rancher-monitoring-node.rules
    namespace: cattle-monitoring-system
  - apiVersion: monitoring.coreos.com/v1
    kind: PrometheusRule
    name: rancher-monitoring-kube-prometheus
    namespace: cattle-monitoring-system
  - apiVersion: monitoring.coreos.com/v1
    kind: PrometheusRule
    name: rancher-monitoring-prometheus
    namespace: cattle-monitoring-system
  - apiVersion: monitoring.coreos.com/v1
    kind: ServiceMonitor
    name: rancher-monitoring-alertmanager
    namespace: cattle-monitoring-system
  - apiVersion: monitoring.coreos.com/v1
    kind: ServiceMonitor
    name: rancher-monitoring-coredns
    namespace: kube-system
  - apiVersion: monitoring.coreos.com/v1
    kind: ServiceMonitor
    name: rancher-monitoring-apiserver
    namespace: default
  - apiVersion: monitoring.coreos.com/v1
    kind: ServiceMonitor
    name: rancher-monitoring-kube-state-metrics
    namespace: cattle-monitoring-system
  - apiVersion: monitoring.coreos.com/v1
    kind: ServiceMonitor
    name: rancher-monitoring-kubelet
    namespace: kube-system
  - apiVersion: monitoring.coreos.com/v1
    kind: ServiceMonitor
    name: rancher-monitoring-node-exporter
    namespace: cattle-monitoring-system
  - apiVersion: monitoring.coreos.com/v1
    kind: ServiceMonitor
    name: rancher-monitoring-grafana
    namespace: cattle-monitoring-system
  - apiVersion: monitoring.coreos.com/v1
    kind: ServiceMonitor
    name: rancher-monitoring-operator
    namespace: cattle-monitoring-system
  - apiVersion: monitoring.coreos.com/v1
    kind: ServiceMonitor
    name: rancher-monitoring-prometheus
    namespace: cattle-monitoring-system
  - apiVersion: admissionregistration.k8s.io/v1beta1
    kind: ValidatingWebhookConfiguration
    name: rancher-monitoring-admission
  values:
    alertmanager:
      alertmanagerSpec:
        configSecret: alertmanager-rancher-monitoring-alertmanager
        useExistingSecret: true
    global:
      cattle:
        clusterId: local
        clusterName: local
        systemDefaultRegistry: ""
      systemDefaultRegistry: ""
    prometheus:
      prometheusSpec:
        evaluationInterval: 1m
        retentionSize: 50GiB
        scrapeInterval: 1m
    prometheusOperator:
      hostNetwork: true
  version: 1
status:
  observedGeneration: 2
  summary:
    state: deployed
